package mx.com.liverpool.shoppingapp.checkoutonepage;

import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.TextView;

import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.analytics.liverpoolanalytics.LiverpoolAnalytics;
import com.threatmetrix.TrustDefender.Config;
import com.threatmetrix.TrustDefender.EndNotifier;
import com.threatmetrix.TrustDefender.ProfilingOptions;
import com.threatmetrix.TrustDefender.ProfilingResult;
import com.threatmetrix.TrustDefender.THMStatusCode;
import com.threatmetrix.TrustDefender.TrustDefender;

import java.util.ArrayList;
import java.util.List;

import fr.arnaudguyon.tabstacker.TabStacker;
import mx.com.liverpool.atgadapterclient.dto.account.address.EventInfoGrAddress;
import mx.com.liverpool.atgadapterclient.dto.common.MinPiecesObject;
import mx.com.liverpool.atgadapterclient.dto.giftregistryv2.EventInfoDto;
import mx.com.liverpool.atgadapterclient.params.checkout.promotions.UpdatePromotionParams;
import mx.com.liverpool.shoppingapp.R;
import mx.com.liverpool.shoppingapp.application.ShoppingAppApplication;
import mx.com.liverpool.shoppingapp.checkout.model.BagSummaryModel;
import mx.com.liverpool.shoppingapp.checkout.step3.view.PaypalWebActivity;
import mx.com.liverpool.shoppingapp.checkout.step4.view.Step4Fragment;
import mx.com.liverpool.shoppingapp.checkoutonepage.model.CheckoutModel;
import mx.com.liverpool.shoppingapp.checkoutonepage.model.DeliveryCheckoutModel;
import mx.com.liverpool.shoppingapp.checkoutonepage.model.ModelItemOnePage;
import mx.com.liverpool.shoppingapp.checkoutonepage.model.PaymentMethodCheckoutModel;
import mx.com.liverpool.shoppingapp.checkoutonepage.model.productOnePageListener;
import mx.com.liverpool.shoppingapp.checkoutonepage.molecules.DeliveryMolecule;
import mx.com.liverpool.shoppingapp.checkoutonepage.molecules.PaymentMethodMolecule;
import mx.com.liverpool.shoppingapp.checkoutonepage.payments.PaymentsFragment;
import mx.com.liverpool.shoppingapp.checkoutonepage.payments.model.CardStep2Model;
import mx.com.liverpool.shoppingapp.common.AppContext;
import mx.com.liverpool.shoppingapp.common.Constants;
import mx.com.liverpool.shoppingapp.common.ListQuantityFragment;
import mx.com.liverpool.shoppingapp.common.Utilities;
import mx.com.liverpool.shoppingapp.common.base.BaseFragment;
import mx.com.liverpool.shoppingapp.common.controller.DynamicKeyController;
import mx.com.liverpool.shoppingapp.common.data.DynamicKeysDao;
import mx.com.liverpool.shoppingapp.common.firebase.FirebaseManager;
import mx.com.liverpool.shoppingapp.common.managers.PropertiesManager;
import mx.com.liverpool.shoppingapp.common.managers.ScreenManager;
import mx.com.liverpool.shoppingapp.common.managers.TrackingManager;
import mx.com.liverpool.shoppingapp.common.widgets.alerts.ConfirmationAlertDialog;
import mx.com.liverpool.shoppingapp.common.widgets.selector.quantity.QuantityMoreSelectorDialog;
import mx.com.liverpool.shoppingapp.giftregistryv2.admin.view.GiftTableOptionFragment;
import mx.com.liverpool.shoppingapp.utils.AlertUtil;
import mx.com.liverpool.shoppingapp.utils.CheckoutUtilities;
import mx.com.liverpool.shoppingapp.utils.TagObjectSize.ObjectSize;
import mx.com.liverpool.shoppingapp.utils.UiUtils;
import mx.com.liverpool.uicomponents.ViewTooltip;

import static android.app.Activity.RESULT_OK;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_BUY_FOR_GIFT_TABLE;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_DELETE;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_EDIT_MESSAGE;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_NEW_SEARCH_GIFT_TABLE;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_NOT_GIFT;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_QUANTITY;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_SAVE_FOR_LATER;
import static mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentAdapter.OPTION_WRITE_MESSAGE;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.PaypalWebActivity.ERRORCALLBACKURL;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.PaypalWebActivity.EXPRESSCHECKOUTURL;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.PaypalWebActivity.SUCCESSCALLBACKURL;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.PaypalWebActivity.TOKEN;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.Step3Fragment.ERROR_MESSAGE;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.Step3Fragment.SUCCES;
import static mx.com.liverpool.shoppingapp.checkout.step3.view.Step3Fragment.SUCCES_RESPONSE;
import static mx.com.liverpool.shoppingapp.checkoutonepage.StatusCheckoutData.StatusType.alert_correct;
import static mx.com.liverpool.shoppingapp.checkoutonepage.ValidateCheckoutData.validateDeliveryMethod;
import static mx.com.liverpool.shoppingapp.checkoutonepage.ValidateCheckoutData.validateGuatemalaWithPaymentCash;
import static mx.com.liverpool.shoppingapp.checkoutonepage.model.PaymentMethodCheckoutModel.HolderType.HOLDER_PAYPAL;
import static mx.com.liverpool.shoppingapp.common.AppContext.PARAM_DELIVERY_METHOD_CHANGED_ONEPAGE;
import static mx.com.liverpool.shoppingapp.common.AppContext.PARAM_EVENT_SETTED_ONEPAGE;
import static mx.com.liverpool.shoppingapp.common.AppContext.PARAM_EXPRESS_CHECKOUT;
import static mx.com.liverpool.shoppingapp.common.AppContext.PARAM_PAYMENT_METHOD_CHANGED_ONEPAGE;
import static mx.com.liverpool.shoppingapp.common.AppContext.PARAM_STORE_CHANGED_ONEPAGE;
import static mx.com.liverpool.shoppingapp.common.Utilities.getColor;
import static mx.com.liverpool.shoppingapp.common.Utilities.getString;
import static mx.com.liverpool.shoppingapp.common.managers.CheckoutManager.ACTION_CLEAN_CHECKOUT_EXPRESS;
import static mx.com.liverpool.shoppingapp.utils.CheckoutConstants.ARG_ORDER_ID_TRACKING;
import static mx.com.liverpool.shoppingapp.utils.CheckoutConstants.CIE_TYPE_CASH;


public class OnePageCheckoutFragment extends BaseFragment implements IOnePageCheckoutView, TabStacker.TabStackInterface {

    public static final String TAG = "OnePageCheckoutFragment";
    public static final String ARG_FROM_GR_LIST = "arg_fromGRList";
    private static final String ARG_IS_EXPRESS = "arg_IsExpress";
    public static final String ARG_GO_TO_SUMMARY_AFTER_END = "argGoToHomeAfterEnd";

    private ConstraintLayout deliveryMoleculeView;
    private ConstraintLayout paymentMoleculeView;
    private ConstraintLayout defaultCheckboxView;
    private DeliveryMolecule deliveryMolecule;
    private PaymentMethodMolecule paymentMethodMolecule;

    private RecyclerView recyclerProducts;
    private OnePageCheckoutPresenter presenter;
    private TextView textAmount;
    private TextView textStep3Title;
    private TextView textViewThermsAndConditions;
    private TextView totalItems, rawSubTotal, savePrice, shippingCost, couponSavePrice, totalPrice;
    private CardView consolidationCard;
    private CheckBox settingMethodsCheckbox;
    private CheckBox consolidationCheckbox;
    private ConstraintLayout couponContainer;
    private EditText couponEditText;
    private Button couponApplyButton;
    private Button finalizeButton;
    private boolean sendEventWithoutData = false;
    private boolean sendEventWithData = false;
    private boolean opch0 = true;
    private String couponFailedMessage;
    private String couponSuccessMessage;
    private boolean express = false;
    private boolean fromGRList = false;
    private DeliveryCheckoutModel deliveryModel;
    private PaymentMethodCheckoutModel paymentModel;
    private EventInfoGrAddress eventSelected;
    private CardStep2Model cardSelected;

    private static int TIME_OUT = 10;

    private View view;

    public static OnePageCheckoutFragment newInstance() {
        Bundle args = new Bundle();
        OnePageCheckoutFragment fragment = new OnePageCheckoutFragment();
        fragment.setArguments(args);
        return fragment;
    }

    public static OnePageCheckoutFragment newInstance(boolean express, boolean fromGRList) {
        Bundle args = new Bundle();
        args.putBoolean(ARG_IS_EXPRESS, express);
        args.putBoolean(ARG_FROM_GR_LIST, fromGRList);
        OnePageCheckoutFragment fragment = new OnePageCheckoutFragment();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null && getArguments().containsKey(ARG_IS_EXPRESS)) {
            express = getArguments().getBoolean(ARG_IS_EXPRESS, false);
            fromGRList = getArguments().getBoolean(ARG_FROM_GR_LIST, false);
            if (getArguments().containsKey("paymentMethod") &&
                    getArguments().getString("paymentMethod","").equals("creditCard")){
                cardSelected = new CardStep2Model();
                cardSelected.setReliable(getArguments().getBoolean("isReliable",false));
                cardSelected.setCardCvv(getArguments().getString("cvv",""));
                cardSelected.setCardExpirationMonth(getArguments().getString("month",""));
                cardSelected.setCardExpirationYear(getArguments().getString("year",""));
            }
        }
        if (AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT) != null &&
                (boolean) AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT)) {
            AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EXPRESS_CHECKOUT_NAVIGATION, false);
        }
        presenter = new OnePageCheckoutPresenter(this, getEventsInProfile(), fromGRList, setProductsActionslistener());

        if (!presenter.isClick())
            presenter.setArrival(true);
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.fragment_onepage_checkout, container, false);
        initViews(view);
        initMolecules();
        initRecycler(recyclerProducts);
        hideKeyboard();
        setupToolbar(true);
        loadData();
        return view;
    }

    @Override
    public void onResume() {
        super.onResume();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        setupToolbar(false);
    }


//    private void cleanExpressCheckoutIfisNeeded() {
//        if (express && getActivity() != null) {
//            Intent intent = new Intent(getActivity(), CleanCheckoutExpressService.class);
//            intent.setAction(ACTION_CLEAN_CHECKOUT_EXPRESS);
//            if (isforcedGoToSummary) {
//                showProgressDialog(null);
//                intent.putExtra(ARG_GO_TO_SUMMARY_AFTER_END, isforcedGoToSummary);
//            }
//            ShoppingAppApplication.getInstance().startService(intent);
//        }
//    }

    private void setupToolbar(boolean resume) {
        if (getInteractionListener() != null) {
            if (resume) {
                getInteractionListener().initCustomHeader(
                        true,
                        false,
                        true,
                        false,
                        false,
                        getString(R.string.text_commit_order),
                        false
                );
            } else {
                AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_SECURE_ELEMENTS_SETTED_ONEPAGE, false);
                AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EVENT_SETTED_ONEPAGE, -1);
            }
            getInteractionListener().enableMegaMenu(!resume);
        }
    }

    private void loadData() {
        showProgressDialog(null);
        getPresenter().requestData(consolidationCheckbox != null && consolidationCheckbox.isChecked(), true);
    }

    private void initMolecules() {
        deliveryMolecule = new DeliveryMolecule(deliveryMoleculeView, this);
        paymentMethodMolecule = new PaymentMethodMolecule(paymentMoleculeView, this);
    }

    public OnePageCheckoutPresenter getPresenter() {
        return presenter;
    }

    private void initViews(View view) {
        if (view == null) {
            return;
        }
        textAmount = view.findViewById(R.id.text_one_page_amount);
        textStep3Title = view.findViewById(R.id.text_step3_title);
        settingMethodsCheckbox = view.findViewById(R.id.checkbox_set_delivery_methods);

        recyclerProducts = view.findViewById(R.id.recycler_express_products);
        deliveryMoleculeView = view.findViewById(R.id.layout_delivery);
        paymentMoleculeView = view.findViewById(R.id.layout_paymentmethod);
        defaultCheckboxView = view.findViewById(R.id.layout_checkbox_setting_methods);

        //region Bag Summary
        totalItems = view.findViewById(R.id.total_items);
        rawSubTotal = view.findViewById(R.id.raw_subtotal);
        savePrice = view.findViewById(R.id.save_price);
        shippingCost = view.findViewById(R.id.shipping_cost);
        couponSavePrice = view.findViewById(R.id.coupon_save_price);
        totalPrice = view.findViewById(R.id.total_price);
        couponContainer = view.findViewById(R.id.content_coupon_view);
        couponApplyButton = view.findViewById(R.id.btnCoupon);
        couponEditText = view.findViewById(R.id.editTxt_Coupon);
        //endregion

        consolidationCard = view.findViewById(R.id.card_consolidation);
        consolidationCheckbox = view.findViewById(R.id.checkbox_consolidation);
        finalizeButton = view.findViewById(R.id.button_do_checkout);

        textViewThermsAndConditions = view.findViewById(R.id.text_terms_conditions);
        String textTermsAnd = Utilities.getString(R.string.i_read);
        String textConditions = Utilities.getString(R.string.text_terms_and_conditions);
        SpannableString text = new SpannableString(textTermsAnd + " " + textConditions);
        text.setSpan(new ForegroundColorSpan(getColor(R.color.rosaLiverpool)), textTermsAnd.length(), textTermsAnd.length() + textConditions.length() + 1, 0);
        textViewThermsAndConditions.setText(text);
        textViewThermsAndConditions.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                goToThermsAndConditions();
            }
        });
        configViews();
    }

    private void goToThermsAndConditions() {
        Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.terms_and_conditions_checkout_url)));
        startActivity(browserIntent);
    }

    private void configViews() {
        finalizeButton.setOnClickListener(this);
        couponApplyButton.setOnClickListener(this);
        consolidationCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                loadData();
                presenter.setConsolidateByUser(consolidationCheckbox.isChecked());
            }
        });
    }

    private void initRecycler(RecyclerView recyclerView) {
        if (recyclerView != null) {
            LinearLayoutManager lm = new LinearLayoutManager(getContext(), RecyclerView.VERTICAL, false);
            lm.setOrientation(RecyclerView.VERTICAL);
            recyclerView.setLayoutManager(lm);
            recyclerView.setNestedScrollingEnabled(true);
            recyclerView.setHasFixedSize(true);
        }
    }

    //region Fill Data
    @Override
    public void fillProducts(RecyclerView.Adapter adapter) {
        if (recyclerProducts != null) {
            recyclerProducts.setAdapter(adapter);
        }
    }

    @Override
    public void fillDelivery(DeliveryCheckoutModel delivery, boolean error) {
        deliveryModel = delivery;
        if (deliveryMolecule != null) {
            deliveryMolecule.updateDelivery(delivery, error);
        }
    }

    @Override
    public void fillPaymentMethod(PaymentMethodCheckoutModel paymentMethod, boolean error) {
        paymentModel = paymentMethod;
        if (paymentMethodMolecule != null) {
            paymentMethodMolecule.updatePayment(paymentMethod, error);
        }
    }

    @Override
    public void fillCommonData(String formattedAmount, int productsCount) {
        if (isAdded()) {
            if (!TextUtils.isEmpty(formattedAmount) && textAmount != null) {
                textAmount.setText(CheckoutUtilities.getSpannableAmount(formattedAmount));
            }
            if (productsCount > 0 && textStep3Title != null) {
                textStep3Title.setText(getResources().getQuantityString(R.plurals.text_onepage_promotions_title, productsCount, productsCount));
            }
        }
    }

    @Override
    public void fillBagSummary(BagSummaryModel bagSummaryModel, CheckoutModel model) {
        if (isAdded()) {

            totalItems.setText(getResources().getQuantityString(R.plurals.text_onepage_subtotal_summary_bag, bagSummaryModel.getTotalItems(), bagSummaryModel.getTotalItems()));
            rawSubTotal.setText(bagSummaryModel.getRawSubtotal());
            savePrice.setText(bagSummaryModel.getSavePrice());
            shippingCost.setText(bagSummaryModel.getShippingCost());
            couponSavePrice.setText(bagSummaryModel.getCouponSavePrice());
            totalPrice.setText(bagSummaryModel.getTotalPrice());
            couponContainer.setVisibility(bagSummaryModel.isShowCouponView() ? View.VISIBLE : View.GONE);
            /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            @team GAPSI
            @project Tagging Analytics
            @author adaniel
            @dateTime 24/05/2020 20:55
            @desc migración evento checkout
            @observations
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
            if (opch0){

                Bundle bundle = new Bundle();
                bundle.putString(getString(R.string.name_open_view), "OnePageCheckout");
                bundle.putString("action", "customOpenView");
                bundle.putString(getString(R.string.result_analytics), "");
                bundle.putString(getString(R.string.cat_analytics), "");
                bundle.putString(getString(R.string.user_id), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.ProfileId));
                bundle.putString(getString(R.string.user_id_nc), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.SessionId));
                bundle.putString("customOpenView", "1");
                LiverpoolAnalytics.publish(getString(R.string.customOpenView), bundle, ShoppingAppApplication.getAppContext());
                ArrayList<ObjectSize> sizes = AppContext.getSizes();
                List<String> strs = new ArrayList<String>();

                Bundle adobeData = new Bundle();
                for(int i = 0; i < model.getModelShippingGroupOnePage().size(); i++){
                    for (int j = 0; j < model.getModelShippingGroupOnePage().get(i).getItems().size(); j++){
                        List<String> evars = new ArrayList<String>();
                        String name = model.getModelShippingGroupOnePage().get(i).getItems().get(j).getDisplayItemName();
                        Integer qty = model.getModelShippingGroupOnePage().get(i).getItems().get(j).getQuantity();
                        Double salePrice = model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSalePrice();
                        AppContext.getInstance().setDeliverySelected(model.getDelivery().getDeliveryName());
                        AppContext.getInstance().setPaymentSelected(model.getPaymentMethod().getPaymentMethod());
                        boolean withData = false;
                        String entrega = "";
                        String pago = "";
                       if (!TextUtils.isEmpty(model.getPaymentMethod().getPaymentMethod()) || !TextUtils.isEmpty(model.getDelivery().getDeliveryName())){
                            withData = true;
                        }
                        String dm44 = model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingSize();
                        String dm45 = "N";
                        if (sizes.size() > 0) {
                            for (ObjectSize size : sizes) {
                                if (!TextUtils.isEmpty(size.getProductId()) && model.getModelShippingGroupOnePage().get(i).getItems().get(j).getProductId().equalsIgnoreCase(size.getProductId())) {
                                    dm44 = (!TextUtils.isEmpty(size.getDisplaySize())) ? size.getDisplaySize() : "";
                                    dm45 = "Y";
                                    break;
                                }
                            }
                        }
                        String vendor = !TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSellerName()) ? "marketplace - "+model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSellerName():"Liverpool";
                        Bundle b = new Bundle();
                       // b.putString("eventCategory", "ecommerce");
                        //b.putString("eventAction", "Llegada OPC");
                       // b.putString("eventLabel", "step 0");
                        b.putString("incommingView", !TextUtils.isEmpty(AppContext.getInstance().getIncommingView()) ? AppContext.getInstance().getIncommingView() :"express");
                        b.putString("viewType", !TextUtils.isEmpty(model.getPaymentMethod().getPaymentMethod()) && !TextUtils.isEmpty(model.getDelivery().getDeliveryName()) ? "Entrega|Pago": !TextUtils.isEmpty(model.getDelivery().getDeliveryName()) ? "Entrega": !TextUtils.isEmpty(model.getPaymentMethod().getPaymentMethod()) ? "Pago":"");
                        b.putString("genericSKU", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getProductId());
                        b.putString("primaryCategory", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getCategoryName());
                        b.putString("datos", String.valueOf(withData));
                        b.putString("MarketPlace", vendor);
                        b.putString("brand", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getBrand());
                        b.putString("size", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingSize());
                        b.putString("color", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingColor());
                        b.putString("material", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getMaterial());
                        b.putString("texture", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getTexture());
                        b.putString("sku", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSku());
                        b.putString("productName", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getDisplayItemName());
                        b.putString("price", String.valueOf(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSalePrice()));
                        b.putString("priceBase",String.valueOf(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getListPrice()));
                        b.putString("promotion", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getPromoDescription());
                        b.putString("quantity", String.valueOf(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getQuantity()));
                        b.putString("step", "0");
                        b.putString("deliveryMethod", model.getDelivery().getDeliveryName());
                        b.putString("paymentMethod", model.getPaymentMethod().getPaymentMethod());
                        b.putString("recommendedSize", dm44);
                        b.putString("recommenderAttribution", dm45);
                        b.putString("eventName", "checkout0");
                        // datos especiales para Adobe

                        adobeData.putString("eventCategory", "ecommerce");
                        adobeData.putString("eventAction", "Llegada OPC");
                        adobeData.putString("eventLabel", "step 0");
                        adobeData.putString("incommingView", !TextUtils.isEmpty(AppContext.getInstance().getIncommingView()) ? AppContext.getInstance().getIncommingView() :"express" );
                        adobeData.putString("viewType", !TextUtils.isEmpty(model.getPaymentMethod().getPaymentMethod()) && !TextUtils.isEmpty(model.getDelivery().getDeliveryName()) ? "Entrega|Pago": !TextUtils.isEmpty(model.getDelivery().getDeliveryName()) ? "Entrega": !TextUtils.isEmpty(model.getPaymentMethod().getPaymentMethod()) ? "Pago":"");
                        adobeData.putString("datos", String.valueOf(withData));
                        adobeData.putString("promotion", model.getModelShippingGroupOnePage().get(i).getItems().get(j).getPromoDescription());
                        adobeData.putString("step", "0");
                        adobeData.putString("deliveryMethod", model.getDelivery().getDeliveryName());
                        adobeData.putString("paymentMethod", model.getPaymentMethod().getPaymentMethod());
                        if(!TextUtils.isEmpty(name)){ evars.add("eVar13=" + name.replace(",", "").replace(";", "")); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getProductId())){ evars.add("eVar21=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getProductId() ); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getCategoryName())){ evars.add("eVar23=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getCategoryName() ); }
                        evars.add("eVar47=" + "N/A");
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getBrand())){ evars.add("eVar16=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getBrand()); }
                        if(!TextUtils.isEmpty(String.valueOf(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSalePrice()))){ evars.add("eVar18=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSalePrice()); }
                        if(!TextUtils.isEmpty(vendor)){ evars.add("eVar41=" + vendor); }
                        if(!TextUtils.isEmpty(String.valueOf(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getListPrice()))){ evars.add("eVar17=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getListPrice()); }
                        evars.add("eVar19=" + 0);
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingSize())){ evars.add("eVar20=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingSize()); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingColor())){ evars.add("eVar44=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getClothingColor()); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSku())){ evars.add("eVar22=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getSku()); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getMaterial())){ evars.add("eVar45=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getMaterial()); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getTexture())){ evars.add("eVar46=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getTexture()); }
                        if(!TextUtils.isEmpty(dm44)){ evars.add("eVar42=" + dm44); }
                        if(!TextUtils.isEmpty(dm45)){ evars.add("eVar43=" + dm45); }
                        if(!TextUtils.isEmpty(model.getDelivery().getDeliveryName())){ evars.add("eVar49=" + model.getDelivery().getDeliveryName()); }
                        if(!TextUtils.isEmpty(model.getPaymentMethod().getPaymentMethod())){ evars.add("eVar25=" + model.getPaymentMethod().getPaymentMethod()); }
                        if(!TextUtils.isEmpty(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getPromoDescription())){ evars.add("eVar48=" + model.getModelShippingGroupOnePage().get(i).getItems().get(j).getPromoDescription()); }

                        strs.add(model.getModelShippingGroupOnePage().get(i).getItems().get(j).getCategoryName() + ";"+ name.replace(",", "").replace(";", "") +";"+ qty +";"+ (salePrice * qty)+";;"+ TextUtils.join("|", evars));

                        adobeData.putString("&&products", TextUtils.join(",", strs));

                        LiverpoolAnalytics.publish("checkout0", b, ShoppingAppApplication.getAppContext());
                    }
                }
                adobeData.putString("checkout", "1");
                LiverpoolAnalytics.publish("adobeOPC", adobeData, ShoppingAppApplication.getAppContext());
                opch0 = false;
                AppContext.getInstance().setIncommingView("");
            }
            /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

        }
    }

    @Override
    public void onEventSelectorClickListener(EventInfoGrAddress eventSelected) {
        getPresenter().setEventSelected(eventSelected);
    }
    //endregion

    @Override
    public void onClick(View v) {
        super.onClick(v);
        switch (v.getId()) {
            case R.id.button_do_checkout:
                boolean setMethodsAsDefault = settingMethodsCheckbox != null && settingMethodsCheckbox.isChecked();
                boolean isConsolidate = consolidationCheckbox != null && consolidationCheckbox.isChecked();
                String moduleCnC = null;
                if (setMethodsAsDefault) {
                    moduleCnC = AppContext.getInstance().getGlobalParams().get(PARAM_STORE_CHANGED_ONEPAGE) != null ?
                            (String) AppContext.getInstance().getGlobalParams().get(PARAM_STORE_CHANGED_ONEPAGE) : "";
                }
                hideKeyboard();
                startCheckout(setMethodsAsDefault, moduleCnC, isConsolidate, cardSelected);
                break;
            case R.id.btnCoupon:
                hideKeyboard();
                if (couponEditText.getText().toString().equalsIgnoreCase("")) {
                    showErrorAlertNotification(getString(R.string.msg_cupon));
                } else {
                    showProgressDialog(null);
                    DynamicKeyController.getInstance(getContext()).validateVersionAndKeys(DynamicKeysDao.CHECK_OUT_STEP_0, new DynamicKeyController.DynamicKeyListener() {
                        @Override
                        public void showDynamicKeys() {
                            couponFailedMessage = DynamicKeyController.getInstance(getContext()).keyController.getString(DynamicKeysDao.CHECK_OUT_STEP_0, "cupon.message.error");
                            couponSuccessMessage = DynamicKeyController.getInstance(getContext()).keyController.getString(DynamicKeysDao.CHECK_OUT_STEP_0, "cupon.message.success");
                        }
                    });
                    presenter.claimCoupon(couponEditText.getText().toString());
                }
                break;
        }
    }

    @Override
    public void onPaymentMethodClickListener(String paymentMethod) {
        StatusCheckoutData error = validateDeliveryMethod(false, deliveryModel, eventSelected);
        if (error.getType().equals(alert_correct)) {
            PaymentsFragment fragment = PaymentsFragment.newInstance(paymentMethod, presenter.isAllDigital(),
                    presenter.getTotalAmount(), presenter.isGuatemalaAddress(), presenter.getModel().isContainsDigitalProduct());
            goToOtherFragment(fragment, null, fragment.getTAG(), true);
        } else {
            showErrorAlertNotification(getString(R.string.alert_missing_payment_method_click_step2));
        }
        AppContext.getInstance().setPaymentSelected(this.paymentModel.getPaymentMethod());
        Bundle b = new Bundle();
        b.putString("eventCategory", "ecommerce");
        b.putString("eventAction", "abrir modal");
        b.putString("eventLabel", "pago");
        b.putString("step", "2");
        b.putString("paymentMethod", this.paymentModel.getPaymentMethod());
        LiverpoolAnalytics.publish("checkout2", b, ShoppingAppApplication.getAppContext());
    }

    @Override
    public void onPaymentMethodFilledSecureElements(String month, String year, String cvv) {
        presenter.secureElement(month, year, cvv);
    }

    public void startCheckout(boolean setMethodsAsDefault, String moduleCnC, boolean consolidation, CardStep2Model cardSelected) {
        if (setMethodsAsDefault) {
            getPresenter().setMethodsAsDefault(moduleCnC);
            getPresenter().confirmPurchase(consolidation, cardSelected);
        } else if (presenter.isGuatemalaAddress() && (null != presenter.getModel() && null != presenter.getModel().getPaymentMethod() &&
                !TextUtils.isEmpty(presenter.getModel().getPaymentMethod().getPaymentMethod()) && presenter.getModel().getPaymentMethod().getPaymentMethod().equalsIgnoreCase(CIE_TYPE_CASH))) {
            showErrorAlertNotification(getString(R.string.cs2_atencion_efectivo_guatemala));
        } else {
            getPresenter().confirmPurchase(consolidation, cardSelected);
        }
    }

    @Override
    public void finishPurchase() {
        Bundle bundle = new Bundle();
        if (AppContext.getInstance().getGlobalParams().get(AppContext.PARAM_PAYMENT_METHOD) != null) {
            bundle.putString("paymentMethod", AppContext.getInstance().getGlobalParams().get(AppContext.PARAM_PAYMENT_METHOD).toString());
            bundle.putBoolean("paypalCancel", false);
        }
        bundle.putBoolean(Step4Fragment.ONLYDIGITAL, getPresenter().containsDigitalProducts());
        bundle.putBoolean(Step4Fragment.FIRST_TIME, true);
        bundle.putString(ARG_ORDER_ID_TRACKING, getOrderId());
        AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EXPRESS_CHECKOUT, false);

        Step4Fragment step4Fragment = new Step4Fragment();
        goToOtherFragment(step4Fragment, bundle, Step4Fragment.TAG, true);
    }

    private String getOrderId() {
        try {
            return (getArguments() != null && getArguments().containsKey(ARG_ORDER_ID_TRACKING)) ? getArguments().getString(ARG_ORDER_ID_TRACKING) : "";
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public void gotoExpressPaypal(String expressCheckoutURL, String token, String succesCallbackURL, String errorCallbackURL) {
        PaypalWebActivity paypalWebActivity = new PaypalWebActivity();
        Bundle bundle = new Bundle();
        bundle.putString(EXPRESSCHECKOUTURL, expressCheckoutURL);
        bundle.putString(TOKEN, token);
        bundle.putString(SUCCESSCALLBACKURL, succesCallbackURL);
        bundle.putString(ERRORCALLBACKURL, errorCallbackURL);

        Intent intent = new Intent(AppContext.getInstance().getCurrentActivity(), paypalWebActivity.getClass());
        intent.putExtras(bundle);

        if (getActivity() != null) {
            getActivity().startActivityForResult(intent, ScreenManager.Screens.WEBVIEWPAYPAL.ordinal());
            getActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
        }
    }

    public productOnePageListener setProductsActionslistener() {
        return new productOnePageListener() {
            @Override
            public void optionPress(String menu, ModelItemOnePage item, int position) {
                switch (menu) {
                    case OPTION_DELETE:
                        presenter.setArrival(false);
                        presenter.setAdd(true);
                        presenter.actionDeleteItem(item);
                        tracking(TrackingManager.onePage_Remove);
                        break;
                    case OPTION_QUANTITY:
                        setQuantity(item);
                        tracking(TrackingManager.onePage_Add);
                        break;
                    case OPTION_NEW_SEARCH_GIFT_TABLE:
                    case OPTION_BUY_FOR_GIFT_TABLE:
                        TrackingManager.isOPCorTraditional = true;
                        searchGiftTable(item);
                        break;
                    case OPTION_NOT_GIFT:
                        showAlertForNoGift(item.getShippingGroupId());
                        break;
                    case OPTION_EDIT_MESSAGE:
                    case OPTION_WRITE_MESSAGE:
                        editMessageGiftTable(item);
                        break;
                    case OPTION_SAVE_FOR_LATER:
                        presenter.setArrival(false);
                        presenter.setAdd(true);
                        presenter.saveForLaterProduct(item);
                        break;
                }
            }

            @Override
            public void onClickPromotion() {
                showErrorAlertNotification(getString(R.string.alert_missing_payment_method_click_promotions));
            }

            @Override
            public void onClickGiftRegistryInfo(ModelItemOnePage item) {
                editMessageGiftTable(item);
            }

            @Override
            public void setPromotionSelected(UpdatePromotionParams updatePromotionParams) {
                presenter.confirmPromotion(updatePromotionParams);
                tracking(TrackingManager.onePage_Promotion);
            }
        };
    }

    private void showAlertForNoGift(final String shippingGroupId) {
        ConfirmationAlertDialog.createConfirmAlertDialog(getActivity(),
                ConfirmationAlertDialog.TAG, getString(R.string.alert_not_gift_title),
                getString(R.string.alert_not_gift_confirmation), true,
                new ConfirmationAlertDialog.onClickListenerConfirm() {
                    @Override
                    public void onConfirm() {
                        if (shippingGroupId != null)
                            presenter.disassociate(shippingGroupId);
                    }
                }
        );
    }

    private void editMessageGiftTable(ModelItemOnePage item) {
        if (AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT) != null &&
                (boolean) AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT)) {
            AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EXPRESS_CHECKOUT_NAVIGATION, true);
        }
        Bundle bundle2 = new Bundle();
        bundle2.putParcelable(BaseFragment.PRODUCT, presenter.changeModel(item));
        bundle2.putString(BaseFragment.FROM, Constants.ONEPAGE);
        bundle2.putString(GiftTableOptionFragment.MESSAGE, item.getEventGiftMessage());
        bundle2.putBoolean(ARG_FROM_GR_LIST, fromGRList);
        presenter.requestGoTo(bundle2, Constants.GIFT_TABLE_OPTIONS, Constants.SHOPPINGBAG);
    }

    private void searchGiftTable(ModelItemOnePage item) {
        if (AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT) != null &&
                (boolean) AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT)) {
            AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EXPRESS_CHECKOUT_NAVIGATION, true);
        }
        Bundle bundle = new Bundle();
        bundle.putString(BaseFragment.FROM, Constants.ONEPAGE);
        bundle.putParcelable(BaseFragment.PRODUCT, presenter.changeModel(item));
        presenter.requestGoTo(bundle, Constants.EVENT_SEARCH_GIFT, Constants.SHOPPINGBAG);
    }

    private void setQuantity(final ModelItemOnePage item) {
        final MinPiecesObject minPieces = presenter.checkMinPieces(item);
        int pieces = 1;
        int maxPieces = 0;
        if (minPieces != null) {
            if (minPieces.getMinimunAmount() > 1)
                pieces = minPieces.getMinimunAmount();

            if (minPieces.getMaxPieces() > 0)
                maxPieces = minPieces.getMaxPieces();
        }

        final int finalPieces = pieces;

        if (UiUtils.showListQuantity(minPieces)) {
            presenter.setArrival(false);
            presenter.setAdd(true);

            ListQuantityFragment.createListQuantityFragment(getActivity(), pieces, maxPieces, new ListQuantityFragment.DataLoadListener() {
                @Override
                public void onSelectQuantity(String quantity) {
                    try {
                        ArrayList<ObjectSize> sizes = AppContext.getSizes();
                        String dm44 = item.getClothingSize();
                        String dm45 = "N";
                        if (sizes.size() > 0) {
                            for (ObjectSize size : sizes) {
                                if (!TextUtils.isEmpty(size.getProductId()) && item.getProductId().equalsIgnoreCase(size.getProductId())) {
                                    dm44 = (!TextUtils.isEmpty(size.getDisplaySize())) ? size.getDisplaySize() : "";
                                    dm45 = "Y";
                                    break;
                                }
                            }
                        }
                        int q=0;
                        if(item.getQuantity() < Integer.parseInt(quantity)){
                            q = Integer.parseInt(quantity) - item.getQuantity();
                            List<String> evars = new ArrayList<String>();
                            String vendor = !TextUtils.isEmpty(item.getSellerName())? "marketplace - "+item.getSellerName()  : "Liverpool";
                            Bundle bundle = new Bundle();
                            bundle.putString(getString(R.string.eventCategory), "ecommerce");
                            bundle.putString(getString(R.string.eventAction), "addToCart");
                            bundle.putString(getString(R.string.eventLabel), "add");
                            bundle.putString(getString(R.string.qty_analytics), String.valueOf(q));
                            bundle.putString(getString(R.string.name_analytics), item.getDisplayItemName());
                            bundle.putString(getString(R.string.sku_generic), item.getProductId());
                            bundle.putString(getString(R.string.category_analytics), item.getCategoryName());
                            bundle.putString(getString(R.string.variant), "N/A");
                            bundle.putString(getString(R.string.brand), item.getBrand());
                            bundle.putString(getString(R.string.price), String.valueOf(item.getSalePrice()));
                            bundle.putString(getString(R.string.MarketPlace), vendor);
                            bundle.putString(getString(R.string.priceBase), String.valueOf(item.getListPrice()));
                            bundle.putString(getString(R.string.priceWithTax), "0");
                            bundle.putString(getString(R.string.talla), item.getClothingSize());
                            bundle.putString(getString(R.string.color), item.getClothingColor());
                            bundle.putString(getString(R.string.sku_specific), item.getSku());
                            bundle.putString(getString(R.string.material_analytics), item.getMaterial());
                            bundle.putString(getString(R.string.texture), item.getTexture());
                            bundle.putString(getString(R.string.recommendedSize), dm44);
                            bundle.putString(getString(R.string.recommenderAttribution), dm45);
                            bundle.putString("eventName", getString(R.string.addToCart));
                            bundle.putString("addToCart", "1");

                            if(!TextUtils.isEmpty(item.getDisplayItemName())){ evars.add("eVar13=" + item.getDisplayItemName().replace(",", "").replace(";", "")); }
                            if(!TextUtils.isEmpty(item.getProductId())){ evars.add("eVar21=" + item.getProductId()); }
                            if(!TextUtils.isEmpty(item.getCategoryName())){ evars.add("eVar23=" + item.getCategoryName()); }
                            evars.add("eVar47=" + "N/A");
                            if(!TextUtils.isEmpty(item.getBrand())){ evars.add("eVar16=" + item.getBrand()); }
                            if(!TextUtils.isEmpty(String.valueOf(item.getSalePrice()))){ evars.add("eVar18=" + item.getSalePrice()); }
                            if(!TextUtils.isEmpty(vendor)){ evars.add("eVar41=" + vendor); }
                            if(!TextUtils.isEmpty(String.valueOf(item.getListPrice()))){ evars.add("eVar17=" + item.getListPrice()); }
                            evars.add("eVar19=" + 0);
                            if(!TextUtils.isEmpty(item.getClothingSize())){ evars.add("eVar20=" + item.getClothingSize()); }
                            if(!TextUtils.isEmpty(item.getClothingColor())){ evars.add("eVar44=" + item.getClothingColor()); }
                            if(!TextUtils.isEmpty(item.getSku())){ evars.add("eVar22=" + item.getSku()); }
                            if(!TextUtils.isEmpty(item.getMaterial())){ evars.add("eVar45=" + item.getMaterial()); }
                            if(!TextUtils.isEmpty(item.getTexture())){ evars.add("eVar46=" + item.getTexture()); }
                            if(!TextUtils.isEmpty(dm44)){ evars.add("eVar42=" + dm44); }
                            if(!TextUtils.isEmpty(dm45)){ evars.add("eVar43=" + dm45); }

                            bundle.putString("&&products", item.getCategoryName() + ";"+ item.getDisplayItemName().replace(",", "").replace(";", "") +";"+ q +";"+ (item.getSalePrice() * q) +";;"+ TextUtils.join("|", evars));
                            LiverpoolAnalytics.publish(getString(R.string.addToCart), bundle, ShoppingAppApplication.getAppContext());
                        }else{
                            q = item.getQuantity() - Integer.parseInt(quantity);
                            List<String> evars = new ArrayList<String>();
                            String vendor = !TextUtils.isEmpty(item.getSellerName())? "marketplace - " + item.getSellerName(): "Liverpool";
                            Bundle bundle = new Bundle();
                            bundle.putString(getString(R.string.eventCategory), "ecommerce");
                            bundle.putString(getString(R.string.eventAction), "removeFromCart");
                            bundle.putString(getString(R.string.eventLabel), "remove");
                            bundle.putString(getString(R.string.qty_analytics), String.valueOf(q));
                            bundle.putString(getString(R.string.name_analytics), item.getDisplayItemName());
                            bundle.putString(getString(R.string.sku_generic),  item.getProductId());
                            bundle.putString(getString(R.string.category_analytics), item.getCategoryName());
                            bundle.putString(getString(R.string.variant), "N/A");
                            bundle.putString(getString(R.string.brand), item.getBrand());
                            bundle.putString(getString(R.string.price), String.valueOf(item.getSalePrice()));
                            bundle.putString(getString(R.string.MarketPlace), vendor);
                            bundle.putString(getString(R.string.priceBase), String.valueOf(item.getListPrice()));
                            bundle.putString(getString(R.string.priceWithTax), "0");
                            bundle.putString(getString(R.string.talla), item.getClothingSize());
                            bundle.putString(getString(R.string.color), item.getClothingColor());
                            bundle.putString(getString(R.string.sku_specific), item.getSku());
                            bundle.putString(getString(R.string.material_analytics), item.getMaterial());
                            bundle.putString(getString(R.string.texture), item.getTexture());
                            bundle.putString(getString(R.string.recommendedSize), dm44);
                            bundle.putString(getString(R.string.recommenderAttribution), dm45);
                            bundle.putString("removeFromCart", "1");
                            bundle.putString("eventName", getString(R.string.customRemoveCart));

                            if(!TextUtils.isEmpty(item.getDisplayItemName())){ evars.add("eVar13=" + item.getDisplayItemName().replace(",", "").replace(";", "")); }
                            if(!TextUtils.isEmpty(item.getProductId())){ evars.add("eVar21=" + item.getProductId()); }
                            if(!TextUtils.isEmpty(item.getCategoryName())){ evars.add("eVar23=" + item.getCategoryName()); }
                            evars.add("eVar47=" + "N/A");
                            if(!TextUtils.isEmpty(item.getBrand())){ evars.add("eVar16=" + item.getBrand()); }
                            if(!TextUtils.isEmpty(String.valueOf(item.getSalePrice()))){ evars.add("eVar18=" + item.getSalePrice()); }
                            if(!TextUtils.isEmpty(vendor)){ evars.add("eVar41=" + vendor); }
                            if(!TextUtils.isEmpty(String.valueOf(item.getListPrice()))){ evars.add("eVar17=" + item.getListPrice()); }
                            evars.add("eVar19=" + 0);
                            if(!TextUtils.isEmpty(item.getClothingSize())){ evars.add("eVar20=" + item.getClothingSize()); }
                            if(!TextUtils.isEmpty(item.getClothingColor())){ evars.add("eVar44=" + item.getClothingColor()); }
                            if(!TextUtils.isEmpty(item.getSku())){ evars.add("eVar22=" + item.getSku()); }
                            if(!TextUtils.isEmpty(item.getMaterial())){ evars.add("eVar45=" + item.getMaterial()); }
                            if(!TextUtils.isEmpty(item.getTexture())){ evars.add("eVar46=" + item.getTexture()); }
                            if(!TextUtils.isEmpty(dm44)){ evars.add("eVar42=" + dm44); }
                            if(!TextUtils.isEmpty(dm45)){ evars.add("eVar43=" + dm45); }

                            bundle.putString("&&products", item.getCategoryName() +";"+ item.getDisplayItemName().replace(",", "").replace(";", "") +";"+ q +";"+ (item.getSalePrice() * q) +";;"+ TextUtils.join("|", evars));
                            LiverpoolAnalytics.publish(getString(R.string.customRemoveCart), bundle, ShoppingAppApplication.getAppContext());
                        }
                        item.setQuantity(Integer.parseInt(quantity));
                    } catch (Exception e) {
                        if (minPieces != null && minPieces.getMinimunAmount() > 1) {
                            item.setQuantity(minPieces.getMinimunAmount());
                        }
                    }
                    presenter.updateShoppingBag(item.getCommerceItemId(), quantity);
                }

                @Override
                public void onMoreQuantity() {
                    QuantityMoreSelectorDialog.createQuantitySelectDialog(getActivity(), QuantityMoreSelectorDialog.TAG, finalPieces, true, new QuantityMoreSelectorDialog.onClickListenerQuantityMore() {
                        @Override
                        public void onConfirmQuantity(String quantity) {
                            presenter.updateShoppingBag(item.getCommerceItemId(), quantity);
                        }
                    });

                }
            });
        } else {
            AlertUtil.showMessageAccept(AppContext.getInstance().getContext(), null,
                    getResources().getQuantityString(R.plurals.alert_max_pieces, minPieces.getMaxPieces(), minPieces.getMaxPieces()),
                    R.string.aceptar, null);
        }
    }

    @Override
    public void showCheckboxToSettingMethods(boolean showcheckbox) {
        defaultCheckboxView.setVisibility(showcheckbox ? View.VISIBLE : View.GONE);
    }

    @Override
    public void setConsolidationView(boolean showConsolidation) {
        boolean isConsolidationEligible = FirebaseManager.getInstance().isPackageApplied();
        consolidationCard.setVisibility(showConsolidation && isConsolidationEligible ? View.VISIBLE : View.GONE);
    }

    @Override
    public void clickTooltip(View v, String string, ViewTooltip.ALIGN align, ViewTooltip.Position position) {
        showTooltip(v, string, align, position);
    }

    @Override
    public void showAlertsByValidationOnModel(StatusCheckoutData alert, CheckoutModel model) {
        switch (alert.getType()) {
            case alert_warning_hint_step1:
                deliveryMolecule.updateDelivery(model.getDelivery(), true);
                if (alert.getMessage() != 0)
                    showErrorAlertNotification(getString(alert.getMessage()));
                break;
            case alert_warning_hint_step2:
                paymentMethodMolecule.updatePayment(model.getPaymentMethod(), true);
            case alert_warning:
                if (alert.getMessage() != 0)
                    showWarningAlertNotification(getString(alert.getMessage()));
                break;
            case alert_error_hint_step1:
            case alert_error_hint_event:
                deliveryMolecule.updateDelivery(model.getDelivery(), true);
                if (alert.getMessage() != 0)
                    showErrorAlertNotification(getString(alert.getMessage()));
                break;
            case alert_error_hint_step2:
            case alert_error_hint_cvv:
                paymentMethodMolecule.updatePayment(model.getPaymentMethod(), true);
                showErrorAlertNotification(alert.getMessage() != 0 ? getString(alert.getMessage()) : (alert.getMessageString()
                        != null ? alert.getMessageString() : ""));
            case alert_error:
                if (alert.getMessage() != 0)
                    showErrorAlertNotification(getString(alert.getMessage()));
                break;
        }
    }

    private List<EventInfoDto> getEventsInProfile() {
        List<EventInfoDto> events = new ArrayList<>();
        if (AppContext.getUserEvents() != null && AppContext.getUserEvents().getEventList() != null) {
            events = AppContext.getUserEvents().getEventList();
        }
        return events;
    }

    @Override
    public void checkAlerts(String warningErrorPayment, boolean errorTotal) {
        if (isAdded()) {
            initAlertsGuatemala();
            initAlertsDeliveryMethod();
            initAlertsPaymentMethod(warningErrorPayment, errorTotal);
        }
    }

    private void initAlertsGuatemala() {
        DeliveryCheckoutModel deliveryModel = presenter.getModel().getDelivery();
        PaymentMethodCheckoutModel paymentModel = presenter.getModel().getPaymentMethod();

        StatusCheckoutData error = validateGuatemalaWithPaymentCash(deliveryModel, paymentModel);
        if (!error.getType().equals(alert_correct)) {
            showAlertsByValidationOnModel(error, presenter.getModel());
        } else if (ValidateCheckoutData.isGuatemalaAddress(deliveryModel)) {
            showWarningAlertNotification(getString(R.string.warning_address_guatemala));
        }
    }

    private void initAlertsDeliveryMethod() {
        if (AppContext.getInstance().getGlobalParams().get(PARAM_DELIVERY_METHOD_CHANGED_ONEPAGE) != null &&
                (boolean) AppContext.getInstance().getGlobalParams().get(PARAM_DELIVERY_METHOD_CHANGED_ONEPAGE)) {
            AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_DELIVERY_METHOD_CHANGED_ONEPAGE, false);
            Bundle b = new Bundle();
            AppContext.getInstance().setDeliverySelected(this.deliveryModel.getDeliveryName());
            b.putString("eventCategory", "ecommerce");
            b.putString("eventAction", "cerrar modal");
            b.putString("eventLabel", "entrega");
            b.putString("step", "1");
            b.putString("deliveryMethod", this.deliveryModel.getDeliveryName());
            LiverpoolAnalytics.publish("checkout1", b, ShoppingAppApplication.getAppContext());
            if (AppContext.getInstance().getGlobalParams().get(PARAM_EVENT_SETTED_ONEPAGE) != null) {
                switch ((int) AppContext.getInstance().getGlobalParams().get(PARAM_EVENT_SETTED_ONEPAGE)) {
                    case 0:
                        showDoneAlertNotification(null, R.string.delivery_alert_delivery_method_changed);
                        break;
                    case 1:
                        showDoneAlertNotification(null, R.string.delivery_alert_delivery_method_changed_event);
                        break;
                    case 2:
                        showWarningAlertNotification(getString(R.string.delivery_alert_delivery_method_changed_not_event));
                        break;
                }
            }
        }
    }

    private void initAlertsPaymentMethod(String warningErrorPayment, boolean errorTotal) {
        //Alert: Your payment method had been changed
        if (AppContext.getInstance().getGlobalParams().get(PARAM_PAYMENT_METHOD_CHANGED_ONEPAGE) != null &&
                (boolean) AppContext.getInstance().getGlobalParams().get(PARAM_PAYMENT_METHOD_CHANGED_ONEPAGE)) {
            Bundle b = new Bundle();
            AppContext.getInstance().setPaymentSelected(this.paymentModel.getPaymentMethod());
            b.putString("eventCategory", "ecommerce");
            b.putString("eventAction", "cerrar modal");
            b.putString("eventLabel", "pago");
            b.putString("step", "2");
            b.putString("paymentMethod", this.paymentModel.getPaymentMethod());
            LiverpoolAnalytics.publish("checkout2", b, ShoppingAppApplication.getAppContext());
            AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_PAYMENT_METHOD_CHANGED_ONEPAGE, false);
            showDoneAlertNotification(null, R.string.delivery_alert_payment_method_changed);
        }

        //Alert: Cash Payment Method
        if (!TextUtils.isEmpty(warningErrorPayment)) {
            if (errorTotal) {
                showErrorAlertNotification(warningErrorPayment); // Your total is higher than limit
            } else {
                showWarningAlertNotification(warningErrorPayment);  // Your total is higher than limit in some correspondents
            }
        }

        //Alert: Paypal, if nightbox is active
        if (!presenter.isAllDigital() && presenter.getModel().getPaymentMethod().isNightBoxActive() && presenter.getModel().getPaymentMethod().getHolderType().equals(HOLDER_PAYPAL)) {
            showErrorAlertNotification(getString(R.string.cs2_nightbox_paypal));
        }

        // Alert, nightbox is active
        if (presenter.getModel().getPaymentMethod().isNightBoxActive()) {
            showWarningAlertNotification(getString(R.string.alert_warning_nightbox_active));
        }
    }

    @Override
    public void forceGoToSummary() {
        if (express) {
            cleanExpressCheckout(new OnePageCheckoutPresenter.CleanExpressCallback() {
                @Override
                public void onCleanExpressComplete() {
                    ScreenManager.getInstance().goToSummary(false);
                }
            });
        } else {
            ScreenManager.getInstance().goToSummary(false);
        }
    }

    @Override
    public void leaveOnePage() {
        getActivity().onBackPressed();
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        hideProgressDialog();
        if (resultCode == RESULT_OK) {
            int response = data.getIntExtra(SUCCES_RESPONSE, 0);
            if (response == SUCCES) {
                gotoStep4();
            } else {
                String message = data.getStringExtra(ERROR_MESSAGE);
                AppContext.getInstance().getCurrentActivity().showAlert(true, "", message, getString(R.string.alert_default_ok_text), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //ScreenManager.getInstance().forceGoToHome();
                    }
                });
            }
        }
    }

    private void gotoStep4() {
        Bundle bundle = new Bundle();
        bundle.putString("paymentMethod", AppContext.getInstance().getGlobalParams().get(AppContext.PARAM_PAYMENT_METHOD).toString());
        bundle.putBoolean("paypalCancel", false);
        bundle.putBoolean(Step4Fragment.ONLYDIGITAL, presenter.isAllDigital());
        bundle.putBoolean(Step4Fragment.FIRST_TIME, true);
        bundle.putString(ARG_ORDER_ID_TRACKING, presenter.getOrderId());
        Step4Fragment step4Fragment = new Step4Fragment();
        AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EXPRESS_CHECKOUT, false);
        goToOtherFragment(step4Fragment, bundle, Step4Fragment.TAG, true);
    }

    @Override
    public void track(String type) {
        tracking(type);
    }

    private void tracking(String name) {
        /*----------------------------------Tracking--------------------------------------*/
        switch (name) {
            case TrackingManager.onePage_Checkout:
                if (!this.sendEventWithData) {
                    this.sendEventWithData = true;
                    TrackingManager.getInstance().trackingOnePageCheckout();

                }
                break;
            case TrackingManager.onePage_Checkout_With_Out_Data:
                if (!this.sendEventWithoutData) {
                    this.sendEventWithoutData = true;
                    TrackingManager.getInstance().trackingOnePageCheckoutWithoutData();
                }
                break;
            case TrackingManager.onePage_Remove:
                /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                @team GAPSI
                @project Tagging Analytics
                @author sgarcia
                @dateTime 15/04/2020 13:15
                @desc migración evento open_view
                @observations Solo se encuentra el atributo "name"
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                //TrackingManager.getInstance().trackingOpenView(TrackingManager.onePage_Remove, "ecommerce", null, null);

                Bundle bundle = new Bundle();
                bundle.putString(getString(R.string.name_open_view), TrackingManager.onePage_Remove);
                bundle.putString(getString(R.string.result_analytics), null);
                bundle.putString(getString(R.string.cat_analytics), "ecommerce");
                bundle.putString("action", "customOpenView");
                bundle.putString(getString(R.string.user_id), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.ProfileId));
                bundle.putString(getString(R.string.user_id_nc), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.SessionId));
                bundle.putString("customOpenView", "1");
                LiverpoolAnalytics.publish(getString(R.string.customOpenView), bundle, ShoppingAppApplication.getAppContext());
                /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                break;
            case TrackingManager.onePage_Add:
                /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                @team GAPSI
                @project Tagging Analytics
                @author sgarcia
                @dateTime 15/04/2020 13:15
                @desc migración evento open_view
                @observations Solo se encuentra el atributo "name"
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                //TrackingManager.getInstance().trackingOpenView(TrackingManager.onePage_Add, "ecommerce", null, null);

                Bundle bnd = new Bundle();
                bnd.putString(getString(R.string.name_open_view), TrackingManager.onePage_Add);
                bnd.putString(getString(R.string.result_analytics), null);
                bnd.putString(getString(R.string.cat_analytics), "ecommerce");
                bnd.putString("action", "customOpenView");
                bnd.putString(getString(R.string.user_id), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.ProfileId));
                bnd.putString(getString(R.string.user_id_nc), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.SessionId));
                bnd.putString("customOpenView", "1");
                LiverpoolAnalytics.publish(getString(R.string.customOpenView), bnd, ShoppingAppApplication.getAppContext());
                /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                break;

            case TrackingManager.onePage_Promotion:
                TrackingManager.getInstance().trackingOnePagePromotion();
                break;
        }
        /*--------------------------------------------------------------------------------*/
    }

    public void callFingerPrint(String pageSession) {
        String org_id = FirebaseManager.getInstance().getStringRemoteConfiguration(FirebaseManager.RemoteConfiguration.CybersourceOrgId);//Firebase

        Config config = new Config().setOrgId(org_id)
                .setContext(getContext())
                .setTimeout(TIME_OUT);
        /*
         * Call init to get some of the slow start up stuff completed before
         * requesting a profile. This is a mandatory call, and requires, at a
         * minimum, the application context and the orgId.
         *
         * Only the first call to init() will be use the configuration object,
         * Subsequent calls are will return {@link THMStatusCode#THM_Already_
         * Initialised} to indicate the instance is already initialized and can be * used for profiling or package scan.
         */
        THMStatusCode initStatus = TrustDefender.getInstance().init(config);

        if (initStatus == THMStatusCode.THM_OK || initStatus == THMStatusCode.THM_Already_Initialised) {
            Log.e(TAG, "Successfully init-ed " + initStatus.getDesc());
            doProfile(pageSession);
        } else {
            Log.e(TAG, "Init was not successful " + initStatus.getDesc() + ". Can't perform profiling.");
        }
    }

    private void doProfile(String pageSession) {
        String merchantId = FirebaseManager.getInstance().getStringRemoteConfiguration(FirebaseManager.RemoteConfiguration.CybersourceMerchantId);//Firebase
        String rnd_sessionID = merchantId.toUpperCase() + pageSession.toUpperCase();

        // (OPTIONAL) Retrieve the version of the SDK
        Log.i(TAG, "Using: " + TrustDefender.version);
        ProfilingOptions options = new ProfilingOptions().setSessionID(rnd_sessionID).setEndNotifier(new CompletionNotifier());

        // Fire off the profiling request.
        THMStatusCode status = TrustDefender.getInstance().doProfileRequest(options);

        if (status == THMStatusCode.THM_OK) {
            // The profiling successfully started, if a session id was generated by the SDK, it is now available
            Log.i(TAG, "My session id is " + TrustDefender.getInstance().getResult().getSessionID());
        }
    }

    public void cleanExpressCheckout(OnePageCheckoutPresenter.CleanExpressCallback callback) {
        if (AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT) != null &&
                (boolean) AppContext.getInstance().getGlobalParams().get(PARAM_EXPRESS_CHECKOUT)) {
            AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_EXPRESS_CHECKOUT, false);
            presenter.cleanExpressCheckout(callback);
        } else {
            if(callback != null){
                callback.onCleanExpressComplete();
            }
        }
    }

    private class CompletionNotifier implements EndNotifier {
        /* This gets called when the profiling has finished.
         *
         * Be careful here because this is not going to be called on the
         * UI thread, and if UI elements can only be updated it from the UI thread.
         */
        @Override
        public void complete(ProfilingResult result) {
            Log.w(TAG, "Profile completed with: "
                    + result.getStatus().toString()
                    + " - " + result.getStatus().getDesc());

            /*
             * Fire off a package scan. This will run in the background and process any * newly installed apps
             *
             * We pass a value of 0 to disable the timeout. It will run until either all * packages are scanned, or another profile request interrupts it.
             */
            TrustDefender.getInstance().doPackageScan(0);
        }
    }

    @Override
    public void onTabFragmentPresented(TabStacker.PresentReason presentReason) {

    }

    @Override
    public void onTabFragmentDismissed(TabStacker.DismissReason dismissReason) {

    }

    @Override
    public View onSaveTabFragmentInstance(Bundle bundle) {
        return view;
    }

    @Override
    public void onRestoreTabFragmentInstance(Bundle bundle) {

    }

}
