package mx.com.liverpool.shoppingapp.browse.pdp.view;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Parcelable;
import android.text.Html;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.method.KeyListener;
import android.text.style.AbsoluteSizeSpan;
import android.text.style.UnderlineSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.webkit.URLUtil;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.core.app.ActivityCompat;
import androidx.core.content.FileProvider;
import androidx.recyclerview.widget.RecyclerView;

import com.analytics.liverpoolanalytics.LiverpoolAnalytics;
import com.androidnetworking.AndroidNetworking;
import com.bumptech.glide.Glide;
import com.daimajia.slider.library.Tricks.ViewPagerEx;
import com.fitanalytics.webwidget.FITAPurchaseReport;
import com.fitanalytics.webwidget.FITAPurchaseReporter;
import com.fitanalytics.webwidget.FITAWebWidget;
import com.fitanalytics.webwidget.FITAWebWidgetHandler;
import com.fitanalytics.webwidget.ManufacturedSize;
import com.fitanalytics.webwidget.WidgetOptions;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;
import com.google.android.gms.analytics.ecommerce.Product;
import com.google.android.gms.analytics.ecommerce.ProductAction;
import com.google.android.material.tabs.TabLayout;
import com.google.gson.Gson;
import com.squareup.picasso.Picasso;
import com.squareup.picasso.Target;

import org.apache.commons.lang3.BooleanUtils;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import fr.arnaudguyon.tabstacker.TabStacker;
import me.zhanghai.android.materialratingbar.MaterialRatingBar;
import mx.com.liverpool.atgadapterclient.AtgAdapterClient;
import mx.com.liverpool.atgadapterclient.AtgAdapterClientController;
import mx.com.liverpool.atgadapterclient.dto.AtgAdapterDto;
import mx.com.liverpool.atgadapterclient.dto.browse.itr.ItrStatusDto;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.DynamicAttribute;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.Flag;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.GetAllOffersPdpDto;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.GetSellersOfferDetailsPdpDto;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.Gift;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.ProductDetailDto;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.ProductDimension;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.SharingDataDto;
import mx.com.liverpool.atgadapterclient.dto.browse.pdp.VariantsInfo;
import mx.com.liverpool.atgadapterclient.dto.browse.recomendations.RecommendedItem;
import mx.com.liverpool.atgadapterclient.dto.checkout.bag.AddedCollectionDto;
import mx.com.liverpool.atgadapterclient.dto.checkout.bag.BagDetailsDto;
import mx.com.liverpool.atgadapterclient.dto.checkout.bag.BagItem;
import mx.com.liverpool.atgadapterclient.dto.checkout.bag.BagProduct;
import mx.com.liverpool.atgadapterclient.dto.common.MinPiecesObject;
import mx.com.liverpool.atgadapterclient.dto.giftregistryv2.EventInfoDto;
import mx.com.liverpool.atgadapterclient.dto.giftregistryv2.GetUserEventsDto;
import mx.com.liverpool.atgadapterclient.dto.giftregistryv2.additem.AddItemToEventDto;
import mx.com.liverpool.atgadapterclient.params.browse.SharingDataParams;
import mx.com.liverpool.atgadapterclient.params.checkout.bag.AddCollectionItemsParams;
import mx.com.liverpool.atgadapterclient.params.checkout.bag.CollectionProduct;
import mx.com.liverpool.shoppingapp.R;
import mx.com.liverpool.shoppingapp.application.ShoppingAppApplication;
import mx.com.liverpool.shoppingapp.browse.interfaces.CustomPdpInterface;
import mx.com.liverpool.shoppingapp.browse.interfaces.PdpCustomizablePresenter;
import mx.com.liverpool.shoppingapp.browse.pdp.characteristics.CharacteristicsActivity;
import mx.com.liverpool.shoppingapp.browse.pdp.controller.DynamicAttributesLogic;
import mx.com.liverpool.shoppingapp.browse.pdp.controller.GalleryPageWidget;
import mx.com.liverpool.shoppingapp.browse.pdp.controller.ListenerGallery;
import mx.com.liverpool.shoppingapp.browse.pdp.controller.ProductDetailController;
import mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity;
import mx.com.liverpool.shoppingapp.browse.pdp.model.AddItemToEventModel;
import mx.com.liverpool.shoppingapp.browse.pdp.model.AttributeDynamicObj;
import mx.com.liverpool.shoppingapp.browse.pdp.model.AttributeDynamicObjDetail;
import mx.com.liverpool.shoppingapp.browse.pdp.model.CustomProductObj;
import mx.com.liverpool.shoppingapp.browse.pdp.model.DataCustomProduct;
import mx.com.liverpool.shoppingapp.browse.pdp.model.EstimatedDeliveryDateModel;
import mx.com.liverpool.shoppingapp.browse.pdp.model.GalleryPdpObject;
import mx.com.liverpool.shoppingapp.browse.pdp.model.GiftWithPurchaseModel;
import mx.com.liverpool.shoppingapp.browse.pdp.model.MultimediaObjectModel;
import mx.com.liverpool.shoppingapp.browse.pdp.model.ProductBasicDetailsModel;
import mx.com.liverpool.shoppingapp.browse.pdp.model.ProductEDD;
import mx.com.liverpool.shoppingapp.browse.pdp.model.VariantsObjDetail;
import mx.com.liverpool.shoppingapp.browse.pdp.promotions.ModalPdpPromotionsViewPagerActivity;
import mx.com.liverpool.shoppingapp.browse.pdp.promotions.PdpPromotionsFragment;
import mx.com.liverpool.shoppingapp.browse.ratingandreviews.view.ProductReviewFragment;
import mx.com.liverpool.shoppingapp.browse.ratingandreviews.view.RatingsAndReviewsFragment;
import mx.com.liverpool.shoppingapp.browse.ratingandreviews.view.ReviewContainerActivity;
import mx.com.liverpool.shoppingapp.checkout.step0.model.ProductsShipmentModel;
import mx.com.liverpool.shoppingapp.common.AppContext;
import mx.com.liverpool.shoppingapp.common.Constants;
import mx.com.liverpool.shoppingapp.common.ListQuantityFragment;
import mx.com.liverpool.shoppingapp.common.MinPieces;
import mx.com.liverpool.shoppingapp.common.ModalAddProductToGiftTableActivity;
import mx.com.liverpool.shoppingapp.common.ModalAddProductToGiftTableController;
import mx.com.liverpool.shoppingapp.common.Toolbox;
import mx.com.liverpool.shoppingapp.common.Utilities;
import mx.com.liverpool.shoppingapp.common.base.BaseActivity;
import mx.com.liverpool.shoppingapp.common.base.BaseFragment;
import mx.com.liverpool.shoppingapp.common.firebase.FirebaseManager;
import mx.com.liverpool.shoppingapp.common.firebase.FirebaseParamsManager;
import mx.com.liverpool.shoppingapp.common.firebase.RatingsAndReviewsParam;
import mx.com.liverpool.shoppingapp.common.managers.CheckoutManager;
import mx.com.liverpool.shoppingapp.common.managers.PropertiesManager;
import mx.com.liverpool.shoppingapp.common.managers.ScreenManager;
import mx.com.liverpool.shoppingapp.common.managers.TrackingManager;
import mx.com.liverpool.shoppingapp.common.managers.WebServicesManager;
import mx.com.liverpool.shoppingapp.common.widgets.carouselproducts.CarouselProducts;
import mx.com.liverpool.shoppingapp.common.widgets.carouselproducts.CarouselProductsListener;
import mx.com.liverpool.shoppingapp.common.widgets.carouselproducts.model.CarouselModel;
import mx.com.liverpool.shoppingapp.common.widgets.selector.quantity.QuantityMoreSelectorDialog;
import mx.com.liverpool.shoppingapp.common.widgets.viewpager.CustomViewPager;
import mx.com.liverpool.shoppingapp.common.widgets.viewpager.ViewPagerAdapter;
import mx.com.liverpool.shoppingapp.giftregistryv2._base.EventStatus;
import mx.com.liverpool.shoppingapp.groupid.view.PreviewGroupIdDialogFragment;
import mx.com.liverpool.shoppingapp.megamenu.controller.MegaMenuController;
import mx.com.liverpool.shoppingapp.myaccount.login.view.LoginActivity;
import mx.com.liverpool.shoppingapp.showPDF.view.ShowPdfFragment;
import mx.com.liverpool.shoppingapp.utils.AlertUtil;
import mx.com.liverpool.shoppingapp.utils.PdpUtils;
import mx.com.liverpool.shoppingapp.utils.TagObjectSize.ObjectSize;
import mx.com.liverpool.shoppingapp.utils.UiUtils;

import static android.app.Activity.RESULT_OK;
import static mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity.ARG_PRODUCT_ID;
import static mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity.ARG_SETTING_SIZE_RECOMMEND;
import static mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity.ARG_SIZES;
import static mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity.ARG_SIZE_SELECTED;
import static mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity.ARG_THUMB;
import static mx.com.liverpool.shoppingapp.browse.pdp.fitanalytics.ModalFitAnalyticsActivity.ARG_VARIANT;
import static mx.com.liverpool.shoppingapp.browse.pdp.view.GalleryActivity.IMAGESELECT;
import static mx.com.liverpool.shoppingapp.browse.pdp.view.OptionsPdpModalActivity.CHARACTERISTICS_ARRAY;
import static mx.com.liverpool.shoppingapp.common.widgets.scanner.SelectGiftTableFragment.KEY_TO;

public class PdpFragment extends BaseFragment implements ProductDetailController.DataLoadListener,
        View.OnClickListener, ViewPagerEx.OnPageChangeListener, RatingsAndReviewsParam,
        ProductReviewFragment.ReviewAlreadySendedListener, DataCustomProduct,
        TabStacker.TabStackInterface, FITAWebWidgetHandler, CustomPdpInterface.View {
    /**
     * Tag for logs.
     */
    private final int GET_LOGIN_CODE = 999;
    public static final int GET_EXPRESS_CHECKOUT_CODE = 33;
    public static final String TAG = "PdpFragment";
    public static final String PARAM_PRODUCT_ID = "productId";
    public static final String PARAM_PRODUCT_DATA = "productData";
    public static final String PARAM_PRODUCT_FROM = "fromPdp";
    public static final String PARAM_PRODUCT_COLLECTIONS = "collections";
    private static final String PARAM_ID_COLLECTIONS = "idCollection";
    private static final int GIFT_TABLE_ADD = 44;

    private static final boolean BACK_BUTTON_ENABLED = true;
    private static final boolean MENU_BUTTON_ENABLED = true;
    private static boolean HEADER_LOGO_ENABLED = true;
    private static final boolean SEARCH_BUTTON_ENABLED = true;
    private static final boolean BAG_BUTTON_ENABLED = true;
    private static final boolean SEARCH_BAR_ENABLED = false;
    private static boolean HEADER_PDP_DISABLE = false;
    private static final String PAGE_TITLE = "";
    private static final String KEY_PRODUCT = "KEY_PRODUCT";
    private static final String KEY_EVENT = "KEY_EVENT";
    private static final String KEY_EVENTS = "KEY_EVENTS";

    private static final String MESG_PRESALE = "El envío se realizará cuando el artículo este disponible";
    private static final String KEY_PRESALE = "presale";

    private boolean isDigitalProduct = false;
    public static final String PRODUCT_ID = "productId";
    public static final String AVG_RATE = "avgRate";
    public static final String RATE_TOTAL = "rateTotal";
    public static final String RATE5 = "rate5";
    public static final String RATE4 = "rate4";
    public static final String RATE3 = "rate3";
    public static final String RATE2 = "rate2";
    public static final String RATE1 = "rate1";
    private static final String CONTENT = "content";
    private static String BIGTICKET = "Big Ticket";
    private static final String TITLE = "title";
    public static final String UPDATE_GALLERY_INTERACTION = "updateGallery";
    public static final String RESET_GALLERY_INTERACTION = "resetGallery";
    private static String PDF_URL = "url_pdf";
    private static String PDF_BASE64 = "base64_pdf";
    private static String PDF_BASE64_NAME = "base64_pdf_file_name";
    public static final String POSITION = "position";

    private PdpPromotionsFragment fragPromoLiverpool;
    private PdpPromotionsFragment fragPromoOther;

    public String productId;
    public ProductDetailDto data;
    private FITAWebWidget mWidgetFitAnalytics;
    private WebView mWebViewFitAnalytics;
    public LinearLayout linearWebView, linearFreeShipping;
    private FITAPurchaseReport report;
    private FITAPurchaseReporter reporter;

    private TextView txtStock = null;
    private TextView txtFitAnalytics;
    private TextView txtDescription = null;
    private TextView txtPaymentOptions = null;
    private TextView txtReview = null;
    private TextView txtCharacteristics = null;
    private TextView tvElectronicWalletPdp = null;
    private ImageView imgToolTipWallet;

    private LinearLayout fitAnalyticsLayout;
    public LinearLayout optEdd = null;
    public LinearLayout quantityLayout = null;
    public LinearLayout layoutdisponibilidad = null;
    public TextView txtDisponibility = null;
    public TextView txt_fechalanzamiento = null;
    public TextView txt_fechalanzamientodate = null;
    private ImageView ImageShareProduct;
    public Button btnAddBag = null;
    public Button btnAddBagDigital = null;
    private Button btnAddMyBagGiftRegistry = null;
    public Button btnPayNow = null;
    private Button btnCancel = null;
    private Button btnAcept = null;
    private EditText txtQuantity = null;
    private LinearLayout lnPrincipal = null;
    private LinearLayout lnContentCarrousel = null;
    private LinearLayout lnRaiting = null;
    private LinearLayout lnGWP = null;
    private LinearLayout linearTxtDescription = null;
    private TextView lnTxtDescription = null;
    //private LinearLayout lnUserGuide = null;
    //private LinearLayout lnExtraInformation = null;
    private CardView lnPolicy = null;
    private LinearLayout lnTxtCharacteristics = null;
    //private LinearLayout lnTxtReviews = null;
    //private PagerIndicator customIndicator = null;
    private View alertViewDownloable = null;
    private TextView downloable_alert_text = null;
    private ProductDetailController controller;
    private LinearLayout bannerSlider;
    private CardView lnRatingsAndReviews;
    private RelativeLayout lnReviews;
    private RelativeLayout RelativewebInfoadicional;
    private LinearLayout pdp_rating;
    private TextView min_amount;
    private ObjectSize sizeTag = null;
    private String fromPDP = "";
    private Boolean firstTimeProductDetail = true;
    private String actualColorTag = "";
    private String actualSize = "";
    private String actualMaterial = "";
    private String actualTexture = "";
    private TextView quantityPDP = null;
    private TextView textExpressDelivery;
    private int dotsColor = 0;
    private int dotsColorUnselected = 0;



    SharedPreferences sharedPreferences;

    private KeyListener keyListener;

    private GalleryPageWidget sliderLayout = null;
    private boolean gotoStep0 = false;

    private boolean isCollections = false;

    private static final String LOG_TAG = "PdpFragment";
    private static Boolean recomendadorSZ = false;

    private View rootView;

    private ArrayList<String> urlImages = new ArrayList<>();

    private static boolean clearMemory = true;
    private boolean reloadImage = true;

    private static int lastValue = 1;
    private List<GalleryPdpObject> list = new ArrayList<>();
    private static String TagTracking = Constants.TagsTracking.PDP.tag();

    private static final String TOTAL = "total";
    private static final String SUBTOTAL = "subtotal";
    private static final String DISCOUNT = "discount";
    private static final String QUANTITY = "quantity";
    private static final String ALERT = "alert";
    private static final Double PRICE_GIFT = 0.01;

    private static final String IN_STOCK_THRESHOLD = "IN_STOCK_THRESHOLD";
    private static final String OUT_OF_STOCK = "OUT_OF_STOCK";
    private static final String IS_PDP = "true";

    private String commerceId = "";
    private int newQuantity = 0;

    private String idCollection = "";

    private AddCollectionItemsParams addCollectionItemsParams = null;

    private boolean isGiftRegistry = false;

    private MinPiecesObject minPiecesObject;

    private GetUserEventsDto events = new GetUserEventsDto();

    private Boolean showView = true;
    private Boolean showViewInfoAdicional = true;
    private ViewPagerAdapter adapterViewPager;
    private RelativeLayout FragmentRatingsAndReviews;
    private TextView lnTxtinfoadicional;
    private View viewMenuinfoadicional;
    private CustomViewPager viewpager_pdp_ofertaspromotions;
    private TabLayout tablayout_pdp_ofertaspromociones;
    private WebView webviewMenu;
    private WebView webviewMenuinfoadicional;
    private TextView txtProductName;
    private TextView lnTxtofertaspromociones;
    private TextView txtProductCode;
    private TextView txtRatingCount;
    private TextView txtMinListPrice;
    private TextView txtGuion;
    private MaterialRatingBar ratingBar;
    private LinearLayout linearPrice;
    private TextView txtMaxListPrice;
    private TextView txtMinPromoPrice;
    private TextView txtGuion2;
    private TextView txtMaxPromoPrice;
    private LinearLayout priceContainer;
    private LinearLayout linearEdd;
    private TextView lblEdd;
    private TextView txtEddRange;
    private TextView txtAddressNickname;
    private TextView txtAddressPdp;
    private LinearLayout linearGwp;
    private ImageView imageGwp;
    private TextView txtGwpItem;
    private TextView txtIsDigital;
    private TextView txtRate;
    private TextView promotion;
    private LinearLayout btnCustomProduct;
    private TextView tvCustomProduct;
    private TextView txtPromo;
    private PdpCustomizablePresenter pdpCustomizablePresenter;
    private int sizeButtonColor = 0;

    private ProductReviewFragment reviews;
    private int productRatingCount = 0;
    private CustomProductObj objCustomProduct = null;
    public boolean executeEventProductDetail = true;

    CarouselProducts carouselProducts;


    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        List<EventInfoDto> list = new ArrayList<>();
        if (AppContext.getUserEvents() != null && AppContext.getUserEvents().getEventList() != null) {
            for (EventInfoDto eventInfoDto : AppContext.getUserEvents().getEventList()) {
                if (!eventInfoDto.getEventStatus().equals("Closed") &&
                        !eventInfoDto.getEventStatus().equals("Cerrado") &&
                        !eventInfoDto.getEventStatus().equals("Evento Extemporaneo") &&
                        !eventInfoDto.getEventStatus().equals("Validity off active") &&
                        !eventInfoDto.getEventStatus().equals("Suspendido") &&
                        !eventInfoDto.getEventStatus().equals("Suspendido por Tiempo")) {
                    list.add(eventInfoDto);
                }
            }
            events.setEventList(list);
            events.setTotalEvents(list.size());
        }
    }

    public PdpFragment() {
        AppContext.getInstance().getGlobalParams().put("botonHome",false);
        setTAG(TagTracking);
    }

    @Override
    public void onResume() {
        super.onResume();

        if (AppContext.getInstance().getGlobalParams().containsKey("botonHome"))
            if ((boolean)AppContext.getInstance().getGlobalParams().get("botonHome"))
                return;

        if (FirebaseManager.getInstance().isHeaderPDPDisable() != null && FirebaseManager.getInstance().isHeaderPDPDisable()){
            HEADER_LOGO_ENABLED = false;
            HEADER_PDP_DISABLE = FirebaseManager.getInstance().isHeaderPDPDisable();
        }

        interactionListener.enableMegaMenu(true);
        interactionListener.initCustomHeader(
                BACK_BUTTON_ENABLED,
                MENU_BUTTON_ENABLED,
                HEADER_LOGO_ENABLED,
                SEARCH_BUTTON_ENABLED,
                BAG_BUTTON_ENABLED,
                PAGE_TITLE,
                SEARCH_BAR_ENABLED,
                HEADER_PDP_DISABLE

        );

        interactionListener.showNavigation(true);

        if (reloadImage) {
            controller.reloadModels();

            if (urlImages != null) {
                if (urlImages.size() != 0) {
                    updateGalleryImages((ArrayList<String>) urlImages.clone());
                }
            }
        } else {
            reloadImage = false;
        }

        this.gotoStep0 = false;
        /*----------------------------------Tracking--------------------------------------*/
        /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        @team GAPSI
        @project Tagging Analytics
        @author sgarcia
        @dateTime 15/04/2020 11:15
        @desc migración evento open_view
        @observations
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
        //TrackingManager.getInstance().trackingOpenView(TrackingManager.vPDP, data.getProductInfo().getProductId(), data.getProductInfo().getDisplayName()                , data.getProductInfo().getType());

        Bundle bundle = new Bundle();
        bundle.putString(getString(R.string.name_open_view), TrackingManager.vPDP);
        bundle.putString("action", "customOpenView");
        bundle.putString(getString(R.string.result_analytics), data.getProductInfo().getType());
        bundle.putString(getString(R.string.cat_analytics), data.getProductInfo().getProductId());
        bundle.putString("customOpenView", "1");
        bundle.putString(getString(R.string.user_id), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.ProfileId));
        bundle.putString(getString(R.string.user_id_nc), PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.SessionId));
        LiverpoolAnalytics.publish(getString(R.string.customOpenView), bundle, ShoppingAppApplication.getAppContext());
        /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

        Double price = 0.0;
        if (null != data.getProductInfo().getProductPrice())
            price = data.getProductInfo().getProductPrice();
        if (null != data.getProductInfo().getListPrice())
            price = data.getProductInfo().getListPrice();
        if (null != data.getProductInfo().getPromoPrice())
            price = data.getProductInfo().getPromoPrice();

        TrackingManager.getInstance().trackingViewPdp(data.getProductInfo().getDefaultSkuId(), data.getProductInfo().getDisplayName(), data.getProductInfo().getFirstLevelParent(), price, null,data.getProductInfo().getDepartment());

        /*--------------------------------------------------------------------------------*/
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        showBottomNavigation(false);
        Log.d(TAG, "onCreateView: ");

        recomendadorSZ = false;
            interactionListener.initCustomHeader(
                    BACK_BUTTON_ENABLED,
                    MENU_BUTTON_ENABLED,
                    HEADER_LOGO_ENABLED,
                    SEARCH_BUTTON_ENABLED,
                    BAG_BUTTON_ENABLED,
                    PAGE_TITLE,
                    SEARCH_BAR_ENABLED
            );

            interactionListener.showNavigation(true);

            Bundle arguments = getArguments();
            rootView = inflater.inflate(R.layout.fragment_pdp, container, false);
            quantityPDP = rootView.findViewById(R.id.tv_qty);

            alertViewDownloable = rootView.findViewById(R.id.pdpAlert);
            downloable_alert_text = alertViewDownloable.findViewById(R.id.downloable_alert_text);
            if (null != arguments) {
                Gson gson = new Gson();
                if (arguments.containsKey(PARAM_PRODUCT_ID) && null == productId)
                    this.productId = arguments.getString(PARAM_PRODUCT_ID);
                if (arguments.containsKey(PARAM_PRODUCT_DATA) && null == this.data)
                    this.data = gson.fromJson(arguments.getString(PARAM_PRODUCT_DATA), ProductDetailDto.class);
                if (arguments.containsKey(PARAM_PRODUCT_COLLECTIONS))
                    this.isCollections = arguments.getBoolean(PARAM_PRODUCT_COLLECTIONS);
                if (arguments.containsKey(PARAM_ID_COLLECTIONS))
                    this.idCollection = arguments.getString(PARAM_ID_COLLECTIONS);
                if (arguments.containsKey(PARAM_PRODUCT_FROM))
                    this.fromPDP = arguments.getString(PARAM_PRODUCT_FROM);
            }

        if (data.getProductInfo() != null && data.getProductInfo().getBrand() != null) {
            pdpCustomizablePresenter = new PdpCustomizablePresenter(this, data.getProductInfo().getBrand());
            pdpCustomizablePresenter.settingsBeforeCreateView();
        }

        if (controller == null){
            controller = new ProductDetailController(sizeButtonColor);
            controller.pdpFragment = this;
            controller.setControllerUpdatesListener(this);
            controller.setDataLoadListener(this);
        }

        setEdd(rootView, controller.getProductBasicDetailsModel().getEddModel());
        setGiftWithPurchaseModel(rootView, controller.getGiftWithPurchaseModel());

            try {
                HashMap<String, EstimatedDeliveryDateModel> stringEstimatedDeliveryDateModelHashMap = (HashMap<String, EstimatedDeliveryDateModel>) AppContext.getInstance().getGlobalParams().get(AppContext.ARRAY_EDD + idCollection);

                EstimatedDeliveryDateModel estimatedDeliveryDateModel = stringEstimatedDeliveryDateModelHashMap.get(data.getProductInfo().getProductId());

                if (estimatedDeliveryDateModel != null) {
                    setEdd(rootView, estimatedDeliveryDateModel);
                }
            } catch (Exception e) {
                Log.w(LOG_TAG, "Issue, this not collection", e);
            }

            //We validate when the flow is Gift Registry
            if (AppContext.getInstance().getGlobalParams().containsKey(AppContext.PARAM_IS_GIFTREGISTRY)) {
                if ((boolean) AppContext.getInstance().getGlobalParams().get(AppContext.PARAM_IS_GIFTREGISTRY)) {
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_IS_GIFTREGISTRY, false);
                }
            }
            //Initialize rating and reviews listener
            FirebaseParamsManager firebaseParamsManager = new FirebaseParamsManager(this);
            firebaseParamsManager.getParameter(firebaseParamsManager.BLOCK_RATINGS_AND_REVIEWS_PARAM);

            configureController();
            showPdpBasicInfo(rootView, controller.getProductBasicDetailsModel());
            setCustomProduct();
        setFitAnalytics();

        Boolean showReleaseDate = false;
        String ReleaseDate = "";
        if(data.getProductInfo().getDynamicAttributes() != null){
            for(DynamicAttribute info : data.getProductInfo().getDynamicAttributes()){
                if(info.getIndex() == 7510){
                    showReleaseDate = true;
                    ReleaseDate = info.getName() + " " + info.getValue();
                }
            }
        }

        if(showReleaseDate){
            txt_fechalanzamientodate.setText(ReleaseDate);
        } else {
            layoutdisponibilidad.setVisibility(View.GONE);
        }

        if (data.getProductInfo().getDynamicAttributes() != null) {
            if (data.getProductInfo().getDynamicAttributes().size() > 0) {
                lnTxtCharacteristics.setVisibility(View.VISIBLE);
            }
        }

        if (data.getProductInfo().getLongDescription() != null) {
            if (!data.getProductInfo().getLongDescription().equalsIgnoreCase("")) {
                linearTxtDescription.setVisibility(View.VISIBLE);
            }
        }

        showRatingsAndReview();

        return rootView;
    }

    public void setGiftWithPurchaseModel(View rootView, GiftWithPurchaseModel giftWithPurchaseModel) {
        linearGwp = rootView.findViewById(R.id.pdpGwp);
        imageGwp = rootView.findViewById(R.id.image_gwp_item);
        txtGwpItem = rootView.findViewById(R.id.txt_gwp_item);
        txtIsDigital = rootView.findViewById(R.id.txt_is_digital);

        if (giftWithPurchaseModel != null) {
            linearGwp.setVisibility(giftWithPurchaseModel.isEnableGWP() ? View.VISIBLE : View.GONE);
            if (giftWithPurchaseModel.getUrlImageGWP() != null && !giftWithPurchaseModel.getUrlImageGWP().equals(""))
                Picasso.with(getContext()).load(giftWithPurchaseModel.getUrlImageGWP()).into(imageGwp);
            else
                imageGwp.setImageDrawable(getContext().getDrawable(R.drawable.gift_placeholder));
            txtGwpItem.setText(giftWithPurchaseModel.getNameGWP());
            txtIsDigital.setVisibility(giftWithPurchaseModel.isDigital() ? View.VISIBLE : View.GONE);
        } else {
            linearGwp.setVisibility(View.GONE);
            imageGwp.setVisibility(View.GONE);
            txtGwpItem.setVisibility(View.GONE);
            txtIsDigital.setVisibility(View.GONE);
        }
    }

    public void setEdd(View rootView, EstimatedDeliveryDateModel eddModel) {
        lblEdd = rootView.findViewById(R.id.lblEdd);
        linearEdd = rootView.findViewById(R.id.optEdd);
        txtEddRange = rootView.findViewById(R.id.txtEddRange);
        txtAddressNickname = rootView.findViewById(R.id.address_nickname_pdp);
        txtAddressPdp = rootView.findViewById(R.id.address_pdp);

        if (eddModel != null && BooleanUtils.isTrue(eddModel.getDeliveryDateRangeAvailable())){
            lblEdd.setTextColor(getResources().getColor(R.color.carbon));
            lblEdd.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
        }

        txtEddRange.setVisibility((eddModel != null && BooleanUtils.isTrue(eddModel.getDeliveryDateRangeAvailable())) ? View.VISIBLE : View.GONE);
        txtEddRange.setText((eddModel != null && !TextUtils.isEmpty(eddModel.getEstimatedDateRange())) ? eddModel.getEstimatedDateRange() : "");

        txtAddressNickname.setText((eddModel != null && !TextUtils.isEmpty(eddModel.getDeliveryAddressNickname())) ? eddModel.getDeliveryAddressNickname() : "");
        txtAddressNickname.setVisibility(!TextUtils.isEmpty(txtAddressNickname.getText()) ? View.VISIBLE : View.GONE);

        txtAddressPdp.setText((eddModel != null && !TextUtils.isEmpty(eddModel.getDeliveryAddress())) ? eddModel.getDeliveryAddress() : "");
        txtAddressPdp.setVisibility(!TextUtils.isEmpty(txtAddressPdp.getText()) ? View.VISIBLE : View.GONE);

        if (eddModel != null && eddModel.getEstimatedDateRange() != null) {
            if (isPresale() && eddModel.getEstimatedDateRange().equalsIgnoreCase(MESG_PRESALE)
                    && minPiecesObject != null && !minPiecesObject.getEdd().isEmpty()) {
                txtEddRange.setVisibility(View.VISIBLE);
                txtEddRange.setText(minPiecesObject.getEdd());
                linearEdd.setOnClickListener(null);
            }
        }

        if (eddModel != null && eddModel.getEstimatedDateRange() != null && !eddModel.getEstimatedDateRange().isEmpty()) {
            if (AppContext.getInstance().getProductsEDD() == null)
                AppContext.getInstance().setProductsEDD(new ArrayList<ProductEDD>());

            if (AppContext.getInstance().getProductsEDD().size() > 0){
                for (ProductEDD productEDD : AppContext.getInstance().getProductsEDD()){
                    if (productEDD.getProductID().equals(data.getProductInfo().getProductId()))
                        AppContext.getInstance().getProductsEDD().remove(productEDD);
                }
            }

            ProductEDD productEDD = new ProductEDD();
            productEDD.setProductID(data.getProductInfo().getProductId());
            productEDD.setDelivery_estimation(eddModel.getEstimatedDateRange());
            productEDD.setDelivery_destination(eddModel.getDelivery_destination());
            productEDD.setPreference(eddModel.getPreference());

            AppContext.getInstance().getProductsEDD().add(productEDD);
        }
    }

    public boolean isEnableFreeShipping() {
        return (FirebaseManager.getInstance().isFreeShippingAvailableListener() != null && FirebaseManager.getInstance().isFreeShippingAvailableListener());

    }

    private boolean isPresale() {
        for (Flag flag : data.getProductInfo().getFlags()) {
            if (flag.getName().equalsIgnoreCase(KEY_PRESALE))
                return true;
        }

        return false;
    }

    public void showPdpBasicInfo(View view, ProductBasicDetailsModel basicDetailsModel) {
        //FragmentRatingsAndReviews = view.findViewById(R.id.FragmentRatingsAndReviews);
        txtDisponibility = view.findViewById(R.id.txtDisponibility);
        txt_fechalanzamiento = view.findViewById(R.id.txt_fechalanzamiento);
        txt_fechalanzamientodate = view.findViewById(R.id.txt_fechalanzamientodate);
        layoutdisponibilidad = view.findViewById(R.id.layoutdisponibilidad);
        lnTxtofertaspromociones = view.findViewById(R.id.lnTxtofertaspromociones);
        webviewMenu = view.findViewById(R.id.webviewMenu);
        //webviewMenuinfoadicional = view.findViewById(R.id.webviewMenuinfoadicional);
        lnTxtinfoadicional = view.findViewById(R.id.lnTxtinfoadicional);
        viewMenuinfoadicional = view.findViewById(R.id.viewMenuinfoadicional);
        viewpager_pdp_ofertaspromotions = view.findViewById(R.id.viewpager_pdp_ofertaspromotions);
        tablayout_pdp_ofertaspromociones = view.findViewById(R.id.tablayout_pdp_ofertaspromociones);
        txtProductName = view.findViewById(R.id.tv_productDisplayName);
        txtProductCode = view.findViewById(R.id.tv_productId);
        txtRatingCount = view.findViewById(R.id.tv_productRatingCount);
        txtMinListPrice = view.findViewById(R.id.tv_productMinListPrice);
        txtGuion = view.findViewById(R.id.tv_hasListPriceRange);
        ratingBar = view.findViewById(R.id.library_tinted_normal_ratingbar);
        linearPrice = view.findViewById(R.id.ll_strikePriceAvailable);
        txtMaxListPrice = view.findViewById(R.id.tv_productMaxListPrice);
        txtMinPromoPrice = view.findViewById(R.id.tv_productMinPromoPrice);
        txtGuion2 = view.findViewById(R.id.tv_hasPromoPriceRange);
        txtMaxPromoPrice = view.findViewById(R.id.tv_productMaxPromoPrice);
        priceContainer = view.findViewById(R.id.price_container_pdp);
        tvElectronicWalletPdp = view.findViewById(R.id.tvElectronicWalletPdp);
        imgToolTipWallet = view.findViewById(R.id.image_tooltip_wallet_pdp);
        linearFreeShipping = view.findViewById(R.id.ln_shipping_free);
        txtPromo = view.findViewById(R.id.tv_promo);
        txtProductName.setText(basicDetailsModel.getProductDisplayName() != null ? Html.fromHtml(basicDetailsModel.getProductDisplayName()): "");
        txtProductCode.setText(String.format(getString(R.string.pdp_product_code), basicDetailsModel.getProductId()));
        ratingBar.setRating(basicDetailsModel.getProductCurrentRating());
        linearPrice.setVisibility(basicDetailsModel.isStrikePriceAvailable() ? View.VISIBLE : View.GONE);
        priceContainer.setOrientation(basicDetailsModel.isHasListPriceRange() ? LinearLayout.VERTICAL : LinearLayout.HORIZONTAL);
        txtGuion.setVisibility(basicDetailsModel.isHasListPriceRange() ? View.VISIBLE : View.GONE);
        txtMaxListPrice.setVisibility(basicDetailsModel.isHasListPriceRange() ? View.VISIBLE : View.GONE);
        txtMaxListPrice.setText(basicDetailsModel.getProductMaxListPrice());
        txtMinListPrice.setText(basicDetailsModel.getProductMinListPrice());
        txtMinPromoPrice.setText(basicDetailsModel.getProductMinPromoPrice());
        txtGuion2.setVisibility(basicDetailsModel.isHasPromoPriceRange() ? View.VISIBLE : View.GONE);
        txtMaxPromoPrice.setVisibility(basicDetailsModel.isHasPromoPriceRange() ? View.VISIBLE : View.GONE);
        txtMaxPromoPrice.setText(basicDetailsModel.getProductMaxPromoPrice());
        tvElectronicWalletPdp.setVisibility(!TextUtils.isEmpty(basicDetailsModel.getElectronicWallet()) ? View.VISIBLE : View.GONE);
        imgToolTipWallet.setVisibility(!TextUtils.isEmpty(basicDetailsModel.getElectronicWalletToolTip()) ? View.VISIBLE : View.GONE);
        linearFreeShipping.setVisibility((isEnableFreeShipping() && !(BooleanUtils.isTrue(controller.getProductDetailDto().getProductInfo().isMarketPlace()) || isDigitalProduct || BooleanUtils.isTrue(controller.getProductDetailDto().getProductInfo().getImportationProduct()))) ? View.VISIBLE : View.GONE);

        if (!TextUtils.isEmpty(basicDetailsModel.getElectronicWallet())) {
            tvElectronicWalletPdp.setVisibility(View.VISIBLE);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                tvElectronicWalletPdp.setText(Html.fromHtml(basicDetailsModel.getElectronicWallet(), Html.FROM_HTML_MODE_COMPACT));
            } else {
                tvElectronicWalletPdp.setText(Html.fromHtml(basicDetailsModel.getElectronicWallet()));
            }
        }

        txtRate = view.findViewById(R.id.tv_rate);
        promotion = view.findViewById(R.id.promotion);
        txtRate.setPaintFlags(txtRate.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
        promotion.setPaintFlags(promotion.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
        productRatingCount = basicDetailsModel.getProductRatingCount();

        if (productRatingCount > 0) {
            txtRatingCount.setText(String.format(getString(R.string.pdp_rating_count_template), productRatingCount));
            txtRatingCount.setVisibility(View.VISIBLE);
            txtRate.setText(getString(R.string.text_rate));
        }else
            txtRate.setText(getString(R.string.text_rate_first_time));

        promotion.setOnClickListener(this);
        setUpViewPager(viewpager_pdp_ofertaspromotions);
        tablayout_pdp_ofertaspromociones.setupWithViewPager(viewpager_pdp_ofertaspromotions);
        showPromo();
        loadFlags(view);
        LoadDataAdapter();
    }

    private void showPromo() {
        MinPieces minPieces = MinPieces.getInstance();
        MinPiecesObject minPiecesObject = null;

        if (minPieces.getMinimous() != null && minPieces.getMinimous().size() > 0) {
            for (Map.Entry<String, MinPiecesObject> entry : minPieces.getMinimous().entrySet()) {
                if (entry.getValue().getSku() != null && entry.getValue().getSku().equals(data.getProductInfo().getProductId())) {
                    minPiecesObject = entry.getValue();
                    break;
                } else if (entry.getValue().getCatId() != null && entry.getValue().getCatId().equals(data.getProductInfo().getFirstLevelParent())) {
                    minPiecesObject = entry.getValue();
                }
            }
        }


        if (minPiecesObject != null && validatePromo(minPiecesObject)) {
            txtPromo.setVisibility(View.VISIBLE);
            txtPromo.setTextColor(Color.parseColor(minPiecesObject.getColorPromo()));
            txtPromo.setText(minPiecesObject.getPromo());
        } else
            txtPromo.setVisibility(View.GONE);
    }

    private boolean validatePromo(MinPiecesObject minPiecesObject) {
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        long timestampSeg = timestamp.getTime() / 1000;

        return !TextUtils.isEmpty(minPiecesObject.getPromo()) && !TextUtils.isEmpty(minPiecesObject.getStartDate()) && !TextUtils.isEmpty(minPiecesObject.getEndDate()) &&
                timestampSeg >= Long.parseLong(minPiecesObject.getStartDate())
                && timestampSeg <= Long.parseLong(minPiecesObject.getEndDate());
    }

    public void configureController() {

        if (!this.productId.isEmpty())
            controller.setProductId(this.productId);
        if (this.data != null)
            controller.setProductDetailDto(this.data);

        controller.setRootView(rootView);

        controller.isDataEdd = false;

        MinPieces minPieces = MinPieces.getInstance();
        if (minPieces.getMinimous() != null && minPieces.getMinimous().containsKey(data.getProductInfo().getProductId().trim())) {
            minPiecesObject = minPieces.getMinimous().get(data.getProductInfo().getProductId().trim());
        }

        findViews(rootView);

        if (minPiecesObject != null && minPiecesObject.getMinimunAmount() > 1) {
            min_amount.setVisibility(View.VISIBLE);
            String text = String.format(Utilities.getString(R.string.min_pieces), minPiecesObject.getMinimunAmount());
            min_amount.setText(text);
        } else {
            min_amount.setVisibility(View.GONE);
        }


        int total = lnContentCarrousel.getChildCount();
        for (int i = 0; i < total; i++) {
            ((CarouselProducts) lnContentCarrousel.getChildAt(0)).removeAllViews();
        }
        lnContentCarrousel.removeAllViews();

        String prefix = this.controller.getProductId().substring(0, 4);
        if (prefix.equalsIgnoreCase("prod")) {
            pdp_rating.setVisibility(View.GONE);
            lnRatingsAndReviews.setVisibility(View.GONE);
        } else {
            pdp_rating.setVisibility(View.VISIBLE);
            lnRatingsAndReviews.setVisibility(View.VISIBLE);
        }


        if (null != data.getRecommendations()) {
              carouselProducts = new CarouselProducts(AppContext.getInstance().getCurrentActivity(), data.getRecommendations(), new CarouselProductsListener() {
                @Override
                public void listenerClickCarousel(RecommendedItem item, String name) {

                    String from = AppContext.getInstance().getContext().getString(R.string.category)+"|" + AppContext.getInstance().getContext().getString(R.string.secondary);
                    if (!TextUtils.isEmpty(item.getGroupType())) {
                        if (item.getGroupType().toLowerCase().equalsIgnoreCase(Constants.COLLECTION) || item.getGroupType().toLowerCase().equalsIgnoreCase(Constants.MACCOLLECTION)) {
                            controller.requestGoTo(item.getProductId(), Constants.COLLECTION, "", Constants.PDP, "");
                        } else {
                            controller.requestGoTo(item.getProductId(), Constants.PDP, (null != item.getHybrid()) ? item.getHybrid().toString() : "", from, "");
                        }
                    } else {
                        controller.requestGoTo(item.getProductId(), Constants.PDP, (null != item.getHybrid()) ? item.getHybrid().toString() : "", from, "");
                    }

                    /*----------------------------------Tracking--------------------------------------*/
                    int position = 0;
                    for (int y = 0; y < data.getRecommendations().getRecommendedItems().size(); y++) {
                        if (data.getRecommendations().getRecommendedItems().get(y).getProductId().equals(item.getProductId())) {
                            position = y;
                            break;
                        }
                    }
                    TrackingManager.getInstance().trackingClickCarouselPdp(item.getDisplayName(), item.getProductId(), Constants.PDP, String.valueOf(position));

                    TrackingManager.getInstance().trackProductClick(Constants.CATEGORY_TRACKING + "|" + Constants.SECONDARY, "",
                            "", String.valueOf(position + 1),
                            "", item.getProductId(),
                            String.valueOf(Utilities.originalPriceValidated(item)),
                            String.valueOf(Utilities.priceValidated(item)), item.getDisplayName());
                    /*--------------------------------------------------------------------------------*/
                    //-------------Traker Google analytics-------------------

                    ProductAction productAction = new ProductAction(ProductAction.ACTION_CLICK);

                    HitBuilders.ScreenViewBuilder builder = new HitBuilders.ScreenViewBuilder()
                            .setProductAction(productAction);


                    Product productCarousel = new Product()
                            .setId(!TextUtils.isEmpty(item.getProductId()) ? item.getProductId() : "")
                            .setName(!TextUtils.isEmpty(item.getDisplayName()) ? item.getDisplayName() : "")
                            .setCategory(!TextUtils.isEmpty(data.getProductInfo().getFirstLevelParent()) ? data.getProductInfo().getFirstLevelParent() : "")
                            .setBrand("")
                            .setPosition(position);
                    builder.addImpression(productCarousel, TrackingManager.gaProductRecommendation);

                    Tracker t = TrackingManager.getInstance().getGoogleAnalyticsTracker();
                    t.setScreenName(TrackingManager.gaProductDetailScreen);
                    t.send(builder.build());
                    //-------------Traker Google analytics-------------------
                }

                @Override
                public void listenerClickCarouselContent(CarouselModel model) {

                }

              }, false, true, true, 3.0);

            lnContentCarrousel.addView(carouselProducts);

        }
        if (null != data.getRelated()) {
            CarouselProducts carouselProducts = new CarouselProducts(AppContext.getInstance().getCurrentActivity(), data.getRelated(), new CarouselProductsListener() {
                @Override
                public void listenerClickCarousel(RecommendedItem item, String name) {
                    if (!TextUtils.isEmpty(item.getGroupType())) {
                        if (item.getGroupType().toLowerCase().equalsIgnoreCase(Constants.COLLECTION) || item.getGroupType().toLowerCase().equalsIgnoreCase(Constants.MACCOLLECTION)) {
                            controller.requestGoTo(item.getProductId(), Constants.COLLECTION, "", Constants.PDP, "");
                        } else {
                            controller.requestGoTo(item.getProductId(), Constants.PDP, (null != item.getHybrid()) ? item.getHybrid().toString() : "", Constants.PDP, "");
                        }
                    } else {
                        controller.requestGoTo(item.getProductId(), Constants.PDP, (null != item.getHybrid()) ? item.getHybrid().toString() : "", Constants.PDP, "");
                    }

                    /*----------------------------------Tracking--------------------------------------*/
                    int position = 0;
                    for (int y = 0; y < data.getRecommendations().getRecommendedItems().size(); y++) {
                        if (data.getRecommendations().getRecommendedItems().get(y).getProductId().equals(item.getProductId())) {
                            position = y;
                            break;
                        }
                    }
                    TrackingManager.getInstance().trackingClickCarouselPdp(item.getDisplayName(), item.getProductId(), Constants.PDP, String.valueOf(position));

                    SharedPreferences sharedPreferences = getActivityContext().getSharedPreferences(Constants.WAYS_PDP, Context.MODE_PRIVATE);
                    String cat = (!sharedPreferences.getString(Constants.CATEGORY_TRACKING, "").equals("")) ? sharedPreferences.getString(Constants.CATEGORY_TRACKING, "") : Constants.CATEGORY_TRACKING;
                    TrackingManager.getInstance().trackProductClick(cat + "|" + Constants.SECONDARY, "",
                            "", String.valueOf(sharedPreferences.getInt("position", 0)),
                            "", item.getProductId(),
                            String.valueOf(Utilities.originalPriceValidated(item)),
                            String.valueOf(Utilities.priceValidated(item)), item.getDisplayName());

                    /*--------------------------------------------------------------------------------*/
                    //-------------Traker Google analytics-------------------

                    ProductAction productAction = new ProductAction(ProductAction.ACTION_CLICK);

                    HitBuilders.ScreenViewBuilder builder = new HitBuilders.ScreenViewBuilder()
                            .setProductAction(productAction);


                    Product productCarousel = new Product()
                            .setId(!TextUtils.isEmpty(item.getProductId()) ? item.getProductId() : "")
                            .setName(!TextUtils.isEmpty(item.getDisplayName()) ? item.getDisplayName() : "")
                            .setCategory(!TextUtils.isEmpty(data.getProductInfo().getFirstLevelParent()) ? data.getProductInfo().getFirstLevelParent() : "")
                            .setBrand("")
                            .setPosition(position);
                    builder.addImpression(productCarousel, TrackingManager.gaProductRecommendation);

                    Tracker t = TrackingManager.getInstance().getGoogleAnalyticsTracker();
                    t.setScreenName(TrackingManager.gaProductDetailScreen);
                    t.send(builder.build());
                    //-------------Traker Google analytics-------------------
                }

                @Override
                public void listenerClickCarouselContent(CarouselModel model) {

                }

            }, false, true, true, 3.0);

            lnContentCarrousel.addView(carouselProducts);

        }

        this.bannerSlider = rootView.findViewById(R.id.gallery_slider);
        if (null != sliderLayout) {

            bannerSlider.removeView(sliderLayout);
            sliderLayout = null;
        }

        sliderLayout = new GalleryPageWidget(this.getContext(), list, new ListenerGallery() {
            @Override
            public void positionGallery(int position) {
                ArrayList<MultimediaObjectModel> multimediaObjectModels = new ArrayList<>();
                for (int i = 0; i < urlImages.size(); i++) {
                    if (urlImages.get(i) == null){
                        continue;
                    }
                    MultimediaObjectModel multimediaObjectModel = new MultimediaObjectModel();
                    multimediaObjectModel.setType(Constants.IMAGE);
                    multimediaObjectModel.setVideoURL("");

                    String urlThumb = urlImages.get(i);

                    multimediaObjectModel.setThumbURL(urlThumb);
                    multimediaObjectModel.setContentURL(urlImages.get(i));
                    multimediaObjectModels.add(multimediaObjectModel);
                }

                Bundle bundle = new Bundle();
                bundle.putString(TITLE, controller.getProductBasicDetailsModel().getProductDisplayName());
                bundle.putInt(IMAGESELECT, position);
                bundle.putSerializable(CONTENT, multimediaObjectModels);

                Intent intent = new Intent(AppContext.getInstance().getCurrentActivity(), GalleryActivity.class);
                intent.putExtras(bundle);
                AppContext.getInstance().getCurrentActivity().startActivity(intent);
                AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
            }
        }, dotsColor,dotsColorUnselected);
        bannerSlider.addView(sliderLayout);

        resetGallery();

        Log.d(TAG, "onCreateView: " + this.controller.getProductDetailDto());

        loadFlags(rootView);

        if (!controller.getProductDetailDto().getProductInfo().getItrElegibility() || BooleanUtils.isTrue(controller.getProductDetailDto().getProductInfo().isMarketPlace())) {
            txtDisponibility.setVisibility(View.GONE);
        }

        controller.validateDeliveryDateAvailable();

        if (isCollections) {
            btnAcept.setVisibility(View.VISIBLE);
            btnCancel.setVisibility(View.VISIBLE);
            btnAddBag.setVisibility(View.GONE);
            btnPayNow.setVisibility(View.GONE);
            lnContentCarrousel.setVisibility(View.GONE);
        } else {
            btnAcept.setVisibility(View.GONE);
            btnCancel.setVisibility(View.GONE);
            btnAddBag.setVisibility(View.VISIBLE);
            btnPayNow.setVisibility(View.VISIBLE);
        }
        btnAddBagDigital.setVisibility(View.GONE);

        if (data.getProductInfo().getUserManual() != null) {
            if (!data.getProductInfo().getUserManual().equalsIgnoreCase("")) {
                //lnUserGuide.setVisibility(View.VISIBLE);
            }
        }

        if (data.getProductInfo().getExtraInformation() != null) {
            if (!data.getProductInfo().getExtraInformation().equalsIgnoreCase("")) {
                if (FirebaseManager.getInstance().getBooleanRemoteConfiguration(FirebaseManager.RemoteConfiguration.PDPExtraInformation)) {
                    //lnExtraInformation.setVisibility(View.VISIBLE);
                }
            }
        }

        if (data.getProductInfo().getRefundPolicy() != null) {
            if (!data.getProductInfo().getRefundPolicy().equalsIgnoreCase("")) {
                lnPolicy.setVisibility(View.VISIBLE);
            }
        }


        if (AppContext.getInstance().isLoggedIn()) {
            ScreenManager.getInstance().showProgressDialog("Recuperando Información", R.id.fragment_container);
            controller.requestEventsGiftRegistry();
        }

        if (minPiecesObject != null && minPiecesObject.getCustom()) {
            btnCustomProduct.setVisibility(View.VISIBLE);
            txtDisponibility.setVisibility(View.GONE);
            lnPolicy.setVisibility(View.VISIBLE);
            showGiftButton(false);
        }

        if (!UiUtils.showListQuantity(minPiecesObject))
            txtQuantity.setCompoundDrawablesRelativeWithIntrinsicBounds(0, 0, 0, 0);

        configureListeners();
    }

    private void showGiftButton(boolean show) {

        if (!show && !isCollections) {
            btnAddMyBagGiftRegistry.setVisibility(View.GONE);
            btnAddBag.setVisibility(View.VISIBLE);
        } else {
            btnAddMyBagGiftRegistry.setVisibility((null != data.getProductInfo().getGRConversionEligible() && data.getProductInfo().getGRConversionEligible() && BooleanUtils.isFalse(data.getProductInfo().isMarketPlace())) ? View.VISIBLE : View.GONE);
            if (btnAddMyBagGiftRegistry.getVisibility() == View.VISIBLE) {
                btnAddMyBagGiftRegistry.setVisibility(events != null && events.getTotalEvents() != null && events.getTotalEvents() != 0 ? View.VISIBLE : View.GONE);
                //btnAddMyBagGiftRegistry.setCompoundDrawablesWithIntrinsicBounds(null, null, getResources().getDrawable(R.drawable.ic_flecha_gris_derecha), null);
            }

            //btnAddBag.setVisibility((btnAddMyBagGiftRegistry.getVisibility() == View.VISIBLE) ? View.GONE : View.VISIBLE);
        }
    }

    private void findViews(@NonNull View rootView) {
        //customIndicator = (PagerIndicator) rootView.findViewById(R.id.custom_indicator);
//        txtStock = (TextView) rootView.findViewById(R.id.txtStock);
//        txtDescription = (TextView) rootView.findViewById(R.id.txtDescription);
//        txtPaymentOptions = (TextView) rootView.findViewById(R.id.txtPaymentOptions);
        //txtReview = (TextView) rootView.findViewById(R.id.txtReview);
//        txtCharacteristics = (TextView) rootView.findViewById(R.id.txtCharacteristics);
//        optEdd = (LinearLayout) rootView.findViewById(R.id.optEdd);
//        quantityLayout = (LinearLayout) rootView.findViewById(R.id.layoutQuantity);
//
//        btnShare = (LinearLayout) rootView.findViewById(R.id.btnShare);
//        txtDisponibility = (TextView) rootView.findViewById(R.id.txtDisponibility);
//        txtQuantity = (EditText) rootView.findViewById(R.id.txtQuantity);
//        lnPrincipal = (LinearLayout) rootView.findViewById(R.id.lnPrincipal);
//        lnContentCarrousel = (LinearLayout) rootView.findViewById(R.id.content_carrousel);
//        lnRaiting = (LinearLayout) rootView.findViewById(R.id.lnRaiting);
//        btnAddBag = (Button) rootView.findViewById(R.id.btnAddMyBag);
//        btnAddBagDigital = (Button) rootView.findViewById(R.id.btnAddMyBagDigital);
//        btnAddMyBagGiftRegistry = (Button) rootView.findViewById(R.id.btnAddMyBagGiftRegistry);
//        btnPayNow = (Button) rootView.findViewById(R.id.btnPayNow);
//        lnGWP = (LinearLayout) rootView.findViewById(R.id.gwp_pdp);
//        btnAcept = (Button) rootView.findViewById(R.id.btnAcept);
//        btnCancel = (Button) rootView.findViewById(R.id.btnCancel);
        lnTxtCharacteristics = rootView.findViewById(R.id.lnTxtCharacteristics);
        linearTxtDescription = rootView.findViewById(R.id.linearTxtDescription);
//        lnUserGuide = (LinearLayout) rootView.findViewById(R.id.lnUserGuide);
//        lnPolicy = (LinearLayout) rootView.findViewById(R.id.lnPolicy);
//        lnExtraInformation = (LinearLayout) rootView.findViewById(R.id.lnExtraInformation);
//        lnTxtPaymentOptions = (LinearLayout) rootView.findViewById(R.id.lnTxtPaymentOptions);
//        lnTxtReviews = (LinearLayout) rootView.findViewById(R.id.lnReviews);
//        lnRatingsAndReviews = (LinearLayout) rootView.findViewById(R.id.lnRatingsAndReviews);
//        pdp_rating = (LinearLayout) rootView.findViewById(R.id.pdp_rating);
//        min_amount = (TextView) rootView.findViewById(R.id.min_amount);
//        btnCustomProduct = (LinearLayout) rootView.findViewById(R.id.btn_custom_product);
//        tvCustomProduct = (TextView) rootView.findViewById(R.id.tvCustomProduct);

//        customIndicator = rootView.findViewById(R.id.custom_indicator);
        mWebViewFitAnalytics = rootView.findViewById(R.id.widget_webview);
        linearWebView = rootView.findViewById(R.id.linear_webview);
        fitAnalyticsLayout = rootView.findViewById(R.id.linear_fit_analytics);
        txtFitAnalytics = rootView.findViewById(R.id.txtFitAnalytics);
        txtFitAnalytics.setText(setTextUnderline(R.string.title_fit_analytics, null));
        txtFitAnalytics.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent openFitAnalytics = new Intent(getActivity(), ModalFitAnalyticsActivity.class);
                openFitAnalytics.putExtra(ARG_PRODUCT_ID, productId);
                openFitAnalytics.putExtra(ARG_VARIANT, controller.getCurrentVariant().getColor());
                openFitAnalytics.putExtra(ARG_THUMB, controller.getCurrentVariant().getImages() != null &&
                        controller.getCurrentVariant().getImages().getXl() != null ?
                        controller.getCurrentVariant().getImages().getXl() : "");
                openFitAnalytics.putExtra(ARG_SIZES, (Serializable) controller.getVariantsController().getListVariantSize());
                AppContext.getInstance().getCurrentActivity().startActivityForResult(openFitAnalytics, ScreenManager.Screens.MODAL_FIT_ANALYTICS.ordinal());
                AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
            }
        });
        txtStock = rootView.findViewById(R.id.txtStock);
        txtDescription = rootView.findViewById(R.id.txtDescription);
        //txtPaymentOptions = rootView.findViewById(R.id.txtPaymentOptions);
        txtReview = rootView.findViewById(R.id.txtReview);
        //txtCharacteristics = rootView.findViewById(R.id.txtCharacteristics);
        optEdd = rootView.findViewById(R.id.optEdd);
        quantityLayout = rootView.findViewById(R.id.layoutQuantity);

        ImageShareProduct = rootView.findViewById(R.id.ImageShareProduct);
        txtDisponibility = rootView.findViewById(R.id.txtDisponibility);
        txtQuantity = rootView.findViewById(R.id.txtQuantity);
        lnPrincipal = rootView.findViewById(R.id.lnPrincipal);
        lnContentCarrousel = rootView.findViewById(R.id.content_carrousel);
        lnRaiting = rootView.findViewById(R.id.lnRaiting);
        btnAddBag = rootView.findViewById(R.id.btnAddMyBag);
        btnAddBagDigital = rootView.findViewById(R.id.btnAddMyBagDigital);
        btnAddMyBagGiftRegistry = rootView.findViewById(R.id.btnAddMyBagGiftRegistry);
        btnPayNow = rootView.findViewById(R.id.btnPayNow);
        lnGWP = rootView.findViewById(R.id.gwp_pdp);
        btnAcept = rootView.findViewById(R.id.btnAcept);
        btnCancel = rootView.findViewById(R.id.btnCancel);
        lnTxtDescription = rootView.findViewById(R.id.lnTxtDescription);
        //lnUserGuide = rootView.findViewById(R.id.lnUserGuide);
        lnPolicy = rootView.findViewById(R.id.lnPolicy);
        //lnExtraInformation = rootView.findViewById(R.id.lnExtraInformation);
        //lnTxtPaymentOptions = rootView.findViewById(R.id.lnTxtPaymentOptions);
        lnReviews = rootView.findViewById(R.id.lnReviews);
        RelativewebInfoadicional = rootView.findViewById(R.id.RelativewebInfoadicional);
        lnRatingsAndReviews = rootView.findViewById(R.id.lnRatingsAndReviews);
        pdp_rating = rootView.findViewById(R.id.pdp_rating);
        min_amount = rootView.findViewById(R.id.min_amount);
        btnCustomProduct = rootView.findViewById(R.id.btn_custom_product);
        tvCustomProduct = rootView.findViewById(R.id.tvCustomProduct);

    }

    private void configureListeners() {
        txtQuantity.setFocusableInTouchMode(false);

        if (txtQuantity.getKeyListener() != null) {
            keyListener = txtQuantity.getKeyListener(); // Save the default KeyListener!!!
        }

        quantityLayout.setOnClickListener(this);
        txtQuantity.setKeyListener(null);
        txtQuantity.setOnClickListener(this);
        txtQuantity.setOnEditorActionListener(onEditorActionListener);

        if (minPiecesObject != null && minPiecesObject.getMinimunAmount() > 1) {
            txtQuantity.setText(String.valueOf(minPiecesObject.getMinimunAmount()));
        } else {
            txtQuantity.setText("1");
        }
        linearTxtDescription.setOnClickListener(this);
        lnTxtCharacteristics.setOnClickListener(this);
        //lnTxtPaymentOptions.setOnClickListener(this);
        //lnTxtReviews.setOnClickListener(this);
        lnTxtDescription.setOnClickListener(this);
        optEdd.setOnClickListener(this);
        txtDisponibility.setOnClickListener(this);
        ImageShareProduct.setOnClickListener(this);
        lnRaiting.setOnClickListener(this);
        btnAddBag.setOnClickListener(this);
        btnAddBagDigital.setOnClickListener(this);
        btnAddMyBagGiftRegistry.setOnClickListener(this);
        btnPayNow.setOnClickListener(this);
        lnGWP.setOnClickListener(this);
        btnAcept.setOnClickListener(this);
        btnCancel.setOnClickListener(this);
        //lnUserGuide.setOnClickListener(this);
        lnPolicy.setOnClickListener(this);
        //lnExtraInformation.setOnClickListener(this);
        btnCustomProduct.setOnClickListener(this);
        lnReviews.setOnClickListener(this);
    }

    @Override
    public void onLowMemory() {
        super.onLowMemory();
        Glide.get(getContext()).onLowMemory();
        Log.w(LOG_TAG, "Low Memory");
    }

    @Override
    public void onDestroy() {
        Log.w(LOG_TAG, "Destroy");

        if (lnContentCarrousel != null) {
            int total = lnContentCarrousel.getChildCount();
            for (int i = 0; i < total; i++) {
                ((CarouselProducts) lnContentCarrousel.getChildAt(0)).removeAllViews();
            }
            lnContentCarrousel.removeAllViews();
        }

        Glide.get(getContext()).clearMemory();
        if (null != controller) {
            AppContext.getInstance().getCurrentActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    AndroidNetworking.forceCancelAll();
                    controller.client.dispatcher().cancelAll();
                }
            });
            controller.client.dispatcher().cancelAll();
            controller.setDataLoadListener(null);
            controller.setControllerUpdatesListener(null);
            controller.clearData();
            controller = null;

        }

        super.onDestroy();
    }

    @SuppressLint("ResourceType")
    @Override
    public void onClick(View view) {
        alertViewDownloable.setVisibility(View.GONE);
        OptionsPdpModalActivity pdpModal;
        Intent intent;
        Bundle bundle;

        switch (view.getId()) {
            case R.id.ln_sell_by:
                DetailSellerFragment sellerDetailFragment = new DetailSellerFragment();
                sellerDetailFragment.setSellerId(controller.getMpModel().getActualProviderId());
                sellerDetailFragment.setProductDetailDto(this.data);
                ScreenManager.getInstance().showFragmentAnimation(sellerDetailFragment, "DetailSellerFragment");
                break;
            case R.id.ln_offer:
                String msgVariant = controller.verifyVariants();
                if (!msgVariant.equals("")) {
                    Log.w(TAG, "Verify the field: " + msgVariant);
                    AppContext.getInstance().getCurrentActivity().showAlert(true, Utilities.getString(R.string.aviso), Utilities.getString(R.string.message_variants) + " " + variantName(msgVariant));
                } else {
                    OffersMarketPlaceFragment offerFragment = new OffersMarketPlaceFragment();
                    if (urlImages != null && !urlImages.isEmpty()) {
                        offerFragment.setUrlImage(urlImages.get(0));
                    }
                    offerFragment.setMkModel(controller.getMpModel());
                    offerFragment.setProductDetailDto(data);
                    offerFragment.setEddModel(controller.getProductBasicDetailsModel().getEddModel());
                    offerFragment.setParams(getCollectionItemParams());
                    offerFragment.setCurrentVariant(controller.getCurrentVariant());
                    ScreenManager.getInstance().showFragmentAnimation(offerFragment, OffersMarketPlaceFragment.TAG);
                }
                break;
            /*case R.id.lnTxtPaymentOptions:
                reloadImage = true;
                Intent promotions = new Intent(getActivity(), ModalPdpPromotionsViewPagerActivity.class);
                promotions.putStringArrayListExtra(ModalPdpPromotionsViewPagerActivity.ARG_MODAL_PROMOTIONS_LIVERPOOL, (ArrayList<String>) data.getProductInfo().getPromotions().getLpPromotions());
                promotions.putStringArrayListExtra(ModalPdpPromotionsViewPagerActivity.ARG_MODAL_PROMOTIONS_OTHER, (ArrayList<String>) data.getProductInfo().getPromotions().getOtherPromotions());
                AppContext.getInstance().getCurrentActivity().startActivity(promotions);
                AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
                break;*/
            case R.id.optEdd:
                reloadImage = true;
                controller.onEddClick();
                break;
            case R.id.ImageShareProduct:
                clearMemory = false;
                reloadImage = false;
                if (isStoragePermissionGranted()) {
                    ShareAction();
                }
                break;
            case R.id.txtDisponibility:
                if (FirebaseManager.getInstance().getBlockPDPItr()){
                    AppContext.getInstance()
                            .getCurrentActivity()
                            .showAlert(true, "", FirebaseManager.getInstance().getMessageCnCBlocked());
                } else {
                    String msgI = controller.verifyVariants();
                    if (!msgI.equals("")) {
                        Log.w(TAG, "Verify the field: " + msgI);
                        AppContext.getInstance().getCurrentActivity().showAlert(true, Utilities.getString(R.string.aviso), Utilities.getString(R.string.message_variants) + " " + variantName(msgI));
                    } else {
                        reloadImage = true;
                        /*----------------------------------Tracking--------------------------------------*/
                        TrackingManager.getInstance().trackingClickItrPdp(controller.getCurrentSKU());
                        /*--------------------------------------------------------------------------------*/

                        ItrActivity.variantsInfo = controller.getCurrentVariant();
                        ItrActivity.sku = controller.getCurrentSKU();
                        ItrActivity.type = data.getProductInfo().getType();
                        ItrActivity.imageUrl = data.getProductInfo().getImages().getLg();
                        ItrActivity.productName = data.getProductInfo().getDisplayName();
                        intent = new Intent(getContext(), ItrActivity.class);
                        startActivityForResult(intent, ItrActivity.REQUEST_CODE);
                    }
                }
                break;
            case R.id.layoutQuantity:
            case R.id.txtQuantity:
                int number = 1;
                int maxPieces = 0;

                if (minPiecesObject != null) {
                    if (minPiecesObject.getMinimunAmount() > 1)
                        number = minPiecesObject.getMinimunAmount();

                    if ( minPiecesObject.getMaxPieces() > 0)
                        maxPieces = minPiecesObject.getMaxPieces();
                }

                if (UiUtils.showListQuantity(minPiecesObject))
                    ListQuantityFragment.createListQuantityFragment(getActivity(), number, maxPieces, dataLoadListener);
                break;
            case R.id.lnRaiting:
                if (productRatingCount > 0) {
                    Bundle reviewBundle = new Bundle();
                    reviewBundle.putString("sku", controller.getProductId());
                    reviewBundle.putString("name", controller.getProductBasicDetailsModel().getProductDisplayName());
                    reviewBundle.putStringArrayList("urlImages", controller.getProductBasicDetailsModel().getImages());
                    RatingsAndReviewsFragment reviews = new RatingsAndReviewsFragment();
                    reviews.setArguments(reviewBundle);
                    ScreenManager.getInstance().showFragmentAnimation(reviews, "ProductReviewFragment");
                } else {
                    Bundle reviewBundle = new Bundle();
                    reviewBundle.putString("sku", controller.getProductId());
                    reviewBundle.putString("name", controller.getProductBasicDetailsModel().getProductDisplayName());
                    reviewBundle.putStringArrayList("urlImages", controller.getProductBasicDetailsModel().getImages());
                    reviewBundle.putSerializable("dimensions", new ArrayList<ProductDimension>());
                    reviews = new ProductReviewFragment();
                    reviews.setReviewAlreadySendedListener(this);
                    reviews.setArguments(reviewBundle);
                    if (AppContext.getInstance().isLoggedIn()) {
                        Intent intents = new Intent(getActivity(), ReviewContainerActivity.class);
                        ScreenManager.getInstance().showFragmentAnimation(reviews, "ProductReviewFragment");
                        intents.putExtras(reviewBundle);
                        AppContext.getInstance().getCurrentActivity().startActivityForResult(intents, ScreenManager.Screens.MODAL_CONFIRM_PASS.ordinal());
                        AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
                    } else {
                        startActivityForResult(new Intent(getContext(), LoginActivity.class), GET_LOGIN_CODE);
                    }
                }
                break;
            case R.id.linearTxtDescription:
            case R.id.lnTxtDescription:
                reloadImage = true;
                ArrayList<DynamicAttribute> array = new ArrayList<DynamicAttribute>();
                if(data.getProductInfo().getDynamicAttributes() != null){
                    array.addAll(data.getProductInfo().getDynamicAttributes());
                }
                pdpModal = new OptionsPdpModalActivity();
                intent = new Intent(AppContext.getInstance().getCurrentActivity(), pdpModal.getClass());
                intent.putParcelableArrayListExtra(CHARACTERISTICS_ARRAY, array);
                bundle = new Bundle();
                bundle.putString(Constants.TITLE, getString(R.string.pdp_title_description));
                bundle.putString(OptionsPdpModalActivity.BODY,data.getProductInfo().getLongDescription());
                intent.putExtras(bundle);
                AppContext.getInstance().getCurrentActivity().startActivity(intent);
                break;
            case R.id.lnTxtCharacteristics:
                reloadImage = true;
                if (data.getProductInfo() != null) {
                    CharacteristicsActivity characteristicsActivity = new CharacteristicsActivity();
                    intent = new Intent(AppContext.getInstance().getCurrentActivity(), characteristicsActivity.getClass());
                    bundle = new Bundle();
                    bundle.putString(CharacteristicsActivity.ARG_TITLE, data.getProductInfo().getDisplayName());
                    bundle.putParcelableArrayList(CharacteristicsActivity.ARG_CHARACTERISTICS, (ArrayList<? extends Parcelable>) data.getProductInfo().getDynamicAttributes());
                    intent.putExtras(bundle);
                    AppContext.getInstance().getCurrentActivity().startActivity(intent);
                }
                break;
            case R.id.lnPrincipal:
                break;
            case R.id.btnAddMyBag:
                AppContext.getInstance().setEventLabel(getString(R.string.aceptotalla));
                if (validateCustomProduct()) {
                    validateToContinueToAddProductToBag(false, false);
                }
                break;
            case R.id.btnAddMyBagGiftRegistry:
                //Go to flow gift registry
                String failed = controller.verifyVariants();
                if (!failed.isEmpty()) {
                    AppContext.getInstance().getCurrentActivity().showAlert(true, getString(R.string.aviso), getString(R.string.message_variants) + " " + variantName(failed));
                } else {
                    addCollectionItemsParams = getCollectionItemParams();
                    requestAddItemToEvent(events, addCollectionItemsParams);
                }
                break;
            case R.id.btnAddMyBagDigital:
                if (validateCustomProduct()) {
                    validateToContinueToAddProductToBag(false, true);
                }
                break;
            case R.id.btnPayNow:
                AppContext.getInstance().setEventLabel("Comprar ahora");
                if (validateCustomProduct()) {
                    validateToContinueToAddProductToBag(false, true);
                }
                break;
            case R.id.gwp_pdp:
                if (controller.getGiftSelected() != null) {
                    reloadImage = true;

                    GwpActivity.setProductDetailDto(controller.getProductDetailDto());
                    intent = new Intent(getContext(), GwpActivity.class);
                    intent.putExtra(GwpActivity.GIFT,controller.getGiftSelected());
                    startActivityForResult(intent, GwpActivity.REQUEST_CODE);
                }
                break;
            case R.id.btnAcept:
                String s = controller.verifyVariants();
                if (!s.equals("")) {
                    showErrorAlertNotification(getString(R.string.message_variants) + " " + variantName(s));
                } else {

                    if (idCollection != null) {
                        if (!idCollection.equalsIgnoreCase("")) {

                            HashMap<String, EstimatedDeliveryDateModel> stringEstimatedDeliveryDateModelHashMap = (HashMap<String, EstimatedDeliveryDateModel>) AppContext.getInstance().getGlobalParams().get(AppContext.ARRAY_EDD + idCollection);

                            EstimatedDeliveryDateModel estimatedDeliveryDateModel = stringEstimatedDeliveryDateModelHashMap.get(data.getProductInfo().getProductId());

                            estimatedDeliveryDateModel = controller.getProductBasicDetailsModel().getEddModel();

                            stringEstimatedDeliveryDateModelHashMap.put(data.getProductInfo().getProductId(), estimatedDeliveryDateModel);

                            Log.w(LOG_TAG, "Valores array: " + stringEstimatedDeliveryDateModelHashMap.toString());

                            int contExiste = 0;

                            for (Map.Entry<String, EstimatedDeliveryDateModel> entry : stringEstimatedDeliveryDateModelHashMap.entrySet()) {
                                String key = entry.getKey();
                                EstimatedDeliveryDateModel value = entry.getValue();
                                if (value != null) {
                                    contExiste += 1;
                                }
                            }

                            if (contExiste == 1) {
                                for (Map.Entry<String, EstimatedDeliveryDateModel> entry : stringEstimatedDeliveryDateModelHashMap.entrySet()) {
                                    String key = entry.getKey();
                                    stringEstimatedDeliveryDateModelHashMap.put(key, estimatedDeliveryDateModel);
                                }
                            }

                            AppContext.getInstance().getGlobalParams().put(AppContext.ARRAY_EDD + idCollection, stringEstimatedDeliveryDateModelHashMap);

                            Log.w(LOG_TAG, "Valores arrayCompletos: " + stringEstimatedDeliveryDateModelHashMap.toString());

                        }
                    }

                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION, data);
                    if (txtQuantity.getText().toString().equalsIgnoreCase(""))
                        //TODO: we can add resource string with placeholders here
                        txtQuantity.setText("" + lastValue);
                    String type = (null != controller.getDynamicAttributesLogic()) ? ((!controller.getDynamicAttributesLogic().getModel().getType().equalsIgnoreCase("")) ? controller.getDynamicAttributesLogic().getModel().getType() : data.getProductInfo().getType()) : data.getProductInfo().getType();
                    if (type.equalsIgnoreCase(Constants.ATTRIBUTE_DYNAMIC_PHYSICAL)) {
                        type = "Soft Line";
                    }

                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_ACEPT, true);
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_QUANTITY, txtQuantity.getText().toString());
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_SKU, controller.getCurrentSKU());
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_VARIANT, controller.getCurrentVariant());
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_ATTRIBUTES_DYNAMIC, (null != controller.getDynamicAttributesLogic()) ? controller.getDynamicAttributesLogic().getModel() : null);
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_DATA, controller.getProductDetailDto().getProductInfo());
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_GIFT, controller.getGiftSelected());
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_EDD, data.getProductInfo().getEddInfo());
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_TYPE, type);
                    AppContext.getInstance().getGlobalParams().put(AppContext.PARAM_OBJ_COLLECTION_PROMOTIONAL_GIFT_MESSAGE, (null != data.getProductInfo().getGwp() &&
                            null != data.getProductInfo().getGwp().getPromotionalGiftMessage()) ? data.getProductInfo().getGwp().getPromotionalGiftMessage() : "");

                    AppContext.getInstance().getCurrentActivity().finish();
                }
                break;
            /*case R.id.lnUserGuide:
                reloadImage = true;
                ShowPdfFragment viewer = new ShowPdfFragment();
                Bundle args = new Bundle();
                args.putString(PDF_URL, data.getProductInfo().getUserManual());
                args.putString(PDF_BASE64, "");
                args.putString(PDF_BASE64_NAME, "");
                viewer.setArguments(args);
                ScreenManager.getInstance().showFragmentAnimation(viewer, "ShowPdfFragment", true, null);
                break;*/
            case R.id.lnPolicy:
                reloadImage = true;
                pdpModal = new OptionsPdpModalActivity();
                intent = new Intent(AppContext.getInstance().getCurrentActivity(), pdpModal.getClass());
                bundle = new Bundle();
                bundle.putString(Constants.TITLE, getString(R.string.pdp_title_refound_policy));
                if (minPiecesObject != null && minPiecesObject.getCustom()) {
                    bundle.putBoolean(OptionsPdpModalActivity.POLICITY_CUSTOM,true);
                } else {
                    bundle.putString(OptionsPdpModalActivity.BODY,data.getProductInfo().getRefundPolicy());
                }
                intent.putExtras(bundle);
                AppContext.getInstance().getCurrentActivity().startActivity(intent);
                break;
            /*case R.id.lnExtraInformation:
                reloadImage = true;
                optionsPdpModalActivity = new OptionsPdpModalActivity();
                intent = new Intent(AppContext.getInstance().getCurrentActivity(), optionsPdpModalActivity.getClass());
                bundle = new Bundle();
                bundle.putString(Constants.TITLE, getString(R.string.pdp_title_extra_information));
                bundle.putString(OptionsPdpModalActivity.BODY, data.getProductInfo().getExtraInformation());

                intent.putExtras(bundle);
                AppContext.getInstance().getCurrentActivity().startActivity(intent);
                break;*/
            case R.id.btnCancel:
                if (ScreenManager.getInstance().getCurrentFragment().getActivity() instanceof ModalCollectionPdpActivity) {
                    ScreenManager.getInstance().finishActivity();
                } else {
                    ScreenManager.getInstance().popFragment();
                }
                break;
            //case R.id.lnReviews:
                /*Bundle reviewBundle1 = new Bundle();
                reviewBundle1.putString("sku", controller.getProductId());
                reviewBundle1.putString("name", controller.getProductBasicDetailsModel().getProductDisplayName());
                reviewBundle1.putStringArrayList("urlImages", controller.getProductBasicDetailsModel().getImages());
                RatingsAndReviewsFragment reviews1 = new RatingsAndReviewsFragment();
                reviews1.setArguments(reviewBundle1);
                ScreenManager.getInstance().showFragmentAnimation(reviews1, "RatingsAndReviews");*/
                //break;
            case R.id.btn_custom_product:
                goToModalCustomProduct();
                break;
            case R.id.promotion:
                    int[] location = new int[2];
                    viewpager_pdp_ofertaspromotions.getLocationInWindow(location);
                    InputMethodManager met = (InputMethodManager) getActivityContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                    Point point = new Point(location[0], location[1]);
                    this.getView().scrollTo(point.x, point.y);
                break;
            case R.id.lnReviews:
                    showRatingsAndReview();
                break;
            case R.id.lnTxtinfoadicional:
                    if(showViewInfoAdicional){
                        WebView web = new WebView(getContext());
                        RelativeLayout.LayoutParams setting = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
                        setting.addRule(RelativeLayout.BELOW, R.id.viewMenuinfoadicional);
                        setting.setMargins(0, 16, 0, 16);
                        web.setId(R.string.IdWebViewInfoAdicional);
                        RelativewebInfoadicional.addView(web, setting);
                        webviewMenuinfoadicional = web;
                        webViewLongDescription();
                        showViewInfoAdicional = false;
                    } else {
                        RelativewebInfoadicional.removeView(RelativewebInfoadicional.findViewById(R.string.IdWebViewInfoAdicional));
                        showViewInfoAdicional = true;
                    }
                break;
        }
    }

    @SuppressLint("ResourceType")
    private void showRatingsAndReview() {
        if(showView){
            RelativeLayout viewR = new RelativeLayout(getActivityContext());
            RelativeLayout.LayoutParams setting = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
            setting.addRule(RelativeLayout.BELOW, R.id.viewMenuratings);
            viewR.setId(R.string.idFragmentRatingsAndReviews);
            lnReviews.addView(viewR, setting);
            viewR.setVisibility(View.VISIBLE);

            Bundle raiandrev = new Bundle();
            raiandrev.putString("sku", controller.getProductId());
            raiandrev.putString("name", controller.getProductBasicDetailsModel().getProductDisplayName());
            raiandrev.putStringArrayList("urlImages", controller.getProductBasicDetailsModel().getImages());
            RatingsAndReviewsFragment fragment = new RatingsAndReviewsFragment();
            fragment.setArguments(raiandrev);
            getActivity().getSupportFragmentManager().beginTransaction()
                    .replace(R.string.idFragmentRatingsAndReviews, fragment)
                    .addToBackStack(null)
                    .commit();
            showView = false;
        } else {
            lnReviews.removeView(lnReviews.findViewById(R.string.idFragmentRatingsAndReviews));
            showView = true;
        }
    }

    private void requestAddItemToEvent(final GetUserEventsDto events, final AddCollectionItemsParams addCollectionItemsParams) {
        if (PdpUtils.haveEvents(events)) {
                AppContext.setSelectedEvent(events.getEventList().get(0));

            Intent intents = new Intent(getActivity(), ModalAddProductToGiftTableActivity.class);
//            intents.putExtra(KEY_RESPONSE_PRODUCT, ((AddItemToEventDto) successResponseDto).getItemInfo());
            Bundle bundle = new Bundle();
            intents.putExtra(KEY_PRODUCT, buildAddItemToEvent(addCollectionItemsParams));
            bundle.putParcelableArrayList(KEY_EVENTS, (ArrayList<? extends Parcelable>) events.getEventList());
//            intents.putExtra(KEY_EVENT, events.getEventList());
            bundle.putInt(KEY_TO, 1);
            bundle.putParcelable(KEY_PRODUCT, buildAddItemToEvent(addCollectionItemsParams));
            intents.putExtra("BUNDLE", bundle);
            startActivityForResult(intents, GIFT_TABLE_ADD);
//            AppContext.getInstance().getCurrentActivity().startActivityForResult(intents, GIFT_TABLE_ADD );
//            AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
//            controller.requestGoTo(bundle, Constants.SELECT_GIFT_TABLE, Constants.PDP);
        /*            controller.requestAddItemGift(
                            events.getEventList().get(0).getEventId(),
                            buildAddItemToEvent(addCollectionItemsParams),
                            new AtgAdapterClientController.AtgAdapterClientListener() {
                                @Override
                                public void onSuccessResponse(AtgAdapterClient.Operation operation, AtgAdapterDto successResponseDto) {
                                    if (operation != null) {
                                        switch (operation) {
                                            case AddItemToEvent:
                                                if (successResponseDto != null && successResponseDto instanceof AddItemToEventDto) {
                                                    if (successResponseDto.isSuccessful()) {
                                                        Intent intents = new Intent(getActivity(), ModalAddProductToGiftTableActivity.class);
                                                        intents.putExtra(KEY_RESPONSE_PRODUCT, ((AddItemToEventDto) successResponseDto).getItemInfo());
                                                        intents.putExtra(KEY_PRODUCT, buildAddItemToEvent(addCollectionItemsParams));
                                                        intents.putExtra(KEY_EVENT, events.getEventList().get(0));
                                                        AppContext.getInstance().getCurrentActivity().startActivityForResult(intents, ScreenManager.Screens.MODAL_CONFIRM_PASS.ordinal());
                                                        AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                }

                                @Override
                                public void onErrorResponse(AtgAdapterClient.Operation operation, AtgAdapterDto errorResponseDto) {
                                    AppContext.getInstance().getCurrentActivity().showAlert(false, "", errorResponseDto.getStatus().getErrorDescription(), getString(R.string.aceptar));
                                }
                            });*/
                }

/*                if (controller != null) {
                    Bundle bundle1 = new Bundle();
                    bundle1.putInt(KEY_TO, 1);
                    bundle1.putParcelable(KEY_PRODUCT, buildAddItemToEvent(addCollectionItemsParams));
                    bundle1.putParcelableArrayList(KEY_EVENTS, (ArrayList<? extends Parcelable>) events.getEventList());
                    controller.requestGoTo(bundle1, Constants.SELECT_GIFT_TABLE, Constants.PDP);
                }*/
        }

    private AddItemToEventModel buildAddItemToEvent(AddCollectionItemsParams addCollectionItemsParams) {
        AddItemToEventModel addItemToEventModel = new AddItemToEventModel();
        addItemToEventModel.setAddCollectionItemsParams(addCollectionItemsParams);
        if (controller.getCurrentVariant() != null) {
            addItemToEventModel.setMaterial(controller.getCurrentVariant().getMaterial());
            addItemToEventModel.setTexture(controller.getCurrentVariant().getTexture());
        }
        if (controller.getProductDetailDto() != null && controller.getProductDetailDto().getProductInfo() != null) {
            addItemToEventModel.setDepartmentId(controller.getProductDetailDto().getProductInfo().getDepartment());
        }

        return addItemToEventModel;
    }

    private void itrStock(String currentSku, String offerId) {
        if (!this.isDigitalProduct()) { //&& (null != this.controller.getProductDetailDto().getProductInfo().isMarketPlace() && !this.controller.getProductDetailDto().getProductInfo().isMarketPlace())
            controller.getItr(currentSku, offerId);
        } else {
            this.hideItr();
        }

    }

    public void hideItr() {
        txtStock.setVisibility(View.GONE);
    }

    private void setStock(int quantity, boolean show, String type) {

        //Sólo bt es así en sl si aplica
        if (show) {

            if (data.getProductInfo().getType().equalsIgnoreCase(BIGTICKET)) {
                txtStock.setVisibility(View.GONE);
            } else {
                txtStock.setVisibility(View.VISIBLE);
                if (type.equalsIgnoreCase(IN_STOCK_THRESHOLD)) {
                    /*if (quantity == 1) {
                        txtStock.setText(getResources().getString(R.string.pdp_stock_text_single));
                    } else if (quantity > 1) {
                        txtStock.setText(getResources().getString(R.string.pdp_stock_text, quantity));
                    }*/
                    txtStock.setText(getResources().getString(R.string.pdp_stock_text_some));
                } else if (type.equalsIgnoreCase(OUT_OF_STOCK)) {
                    txtStock.setText(getResources().getString(R.string.pdp_stock_text_out));
                }
            }
        } else {
            txtStock.setVisibility(View.GONE);
        }
    }

    private void loadFlags(@NonNull View containerView) {
        ArrayList<String> flagsName = this.controller.getNameFlags(data.getProductInfo().getFlags());

        TextView txtFlag1 = containerView.findViewById(R.id.txtFlag1);
        TextView txtFlag2 = containerView.findViewById(R.id.txtFlag2);
        TextView txtFlag3 = containerView.findViewById(R.id.txtFlag3);


        if (flagsName != null && !flagsName.isEmpty()) {
            for (int i = 0; i < flagsName.size(); i++) {
                String flagname = flagsName.get(i);
                String flagExpress = Utilities.getFlag(Utilities.Flags.EXPRESSDELIVERY.toString());
                if (i < 3 && flagname.equalsIgnoreCase(flagExpress)) {
                    textExpressDelivery = containerView.findViewById(R.id.txtExpressDeliveryMessage);
                    if (textExpressDelivery != null) {
                        String message = FirebaseManager.getInstance().getStringRemoteConfiguration(FirebaseManager.RemoteConfiguration.txtExpressDelivery);

                        textExpressDelivery.setText(message);
                        textExpressDelivery.setVisibility(View.VISIBLE);
                    }
                }
            }

        }
        if (flagsName.size() >= 3) {
            txtFlag1.setText(flagsName.get(0));
            txtFlag2.setText(flagsName.get(1));
            txtFlag3.setText(flagsName.get(2));

        } else if (flagsName.size() == 2) {
            txtFlag1.setText(flagsName.get(0));
            txtFlag2.setText(flagsName.get(1));
            txtFlag3.setVisibility(View.GONE);

        } else if (flagsName.size() == 1) {
            txtFlag1.setText(flagsName.get(0));
            txtFlag2.setVisibility(View.GONE);
            txtFlag3.setVisibility(View.GONE);

        } else {
            LinearLayout lnFlags = containerView.findViewById(R.id.lnFlags);
            lnFlags.setVisibility(View.GONE);
        }
    }

    private void LoadDataAdapter() {
        webViewProductInfo();
        lnTxtDescription.setText(R.string.vermas);
        lnTxtinfoadicional.setText(R.string.infoadicional);
        lnTxtinfoadicional.setOnClickListener(this);
        lnTxtofertaspromociones.setText(R.string.ofertaspromociones);
        fragPromoLiverpool = PdpPromotionsFragment.newInstance((ArrayList<String>) data.getProductInfo().getPromotions().getLpPromotions());
        fragPromoOther = PdpPromotionsFragment.newInstance((ArrayList<String>) data.getProductInfo().getPromotions().getOtherPromotions());
    }

    private void webViewProductInfo() {
        webviewMenu.loadData(data.getProductInfo().getLongDescription(), "text/html", "utf-8");
    }

    @SuppressLint("SetJavaScriptEnabled")
    private void webViewLongDescription(){
        String frameVideo = "https://media.flixcar.com/delivery/mobile/show/12376/in/1175706";
        webviewMenuinfoadicional.setWebViewClient(new WebViewClient(){
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                return false;
            }
        });
        WebSettings settings = webviewMenuinfoadicional.getSettings();
        settings.setJavaScriptEnabled(true);
        webviewMenuinfoadicional.loadUrl(frameVideo);
    }

    private void setUpViewPager(CustomViewPager viewPager) {
        adapterViewPager = new ViewPagerAdapter(getChildFragmentManager());
        adapterViewPager.addFragment(fragPromoLiverpool, getString(R.string.title_tab_liverpool_promotions_pdp));
        adapterViewPager.addFragment(fragPromoOther, getString(R.string.title_tab_other_promotions_pdp));
        viewPager.setAdapter(adapterViewPager);
    }

    public void ShareAction() {
        ScreenManager.getInstance().showProgressDialog(getString(R.string.share_prepare_string), R.id.fragment_container);
        /*----------------------------------Tracking--------------------------------------*/
        TrackingManager.getInstance().trackingClickSharePdp(data.getProductInfo().getProductId(), TrackingManager.cLink);
        /*--------------------------------------------------------------------------------*/
        SharingDataParams sharingDataParams = new SharingDataParams();
        sharingDataParams.setProductId(data.getProductInfo().getProductId());
        sharingDataParams.setIsPdp(IS_PDP);
        controller.getLinkShare(sharingDataParams);
    }

    private TextView.OnEditorActionListener onEditorActionListener = new TextView.OnEditorActionListener() {
        @Override
        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                if (txtQuantity.getText().toString().equalsIgnoreCase("")) {
                    if (minPiecesObject != null && minPiecesObject.getMinimunAmount() > 0) {
                        txtQuantity.setText(String.valueOf(minPiecesObject.getMinimunAmount()));
                    } else {
                        txtQuantity.setText("1");
                    }
                } else if (minPiecesObject != null && minPiecesObject.getMinimunAmount() > 0 && minPiecesObject.getMinimunAmount() > Utilities.convertToInt(txtQuantity.getText().toString(), 10)) {
                    txtQuantity.setText(String.valueOf(minPiecesObject.getMinimunAmount()));
                    String text = String.format(Utilities.getString(R.string.min_pieces), minPiecesObject.getMinimunAmount());
                    AlertUtil.showMessageAccept(AppContext.getInstance().getContext(), null, text, R.string.aceptar, null);
                }
                txtQuantity.setFocusableInTouchMode(false);
                txtQuantity.setKeyListener(null);
                InputMethodManager imm = (InputMethodManager) AppContext.getInstance().getCurrentActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0); // hide
                txtQuantity.clearFocus();
                return true;
            }
            return false;
        }
    };

    private ListQuantityFragment.DataLoadListener dataLoadListener = new ListQuantityFragment.DataLoadListener() {
        @Override
        public void onSelectQuantity(String quantity) {
            txtQuantity.setKeyListener(null);
            txtQuantity.setText(quantity);
            txtQuantity.clearFocus();
        }

        @Override
        public void onMoreQuantity() {
            int minPieces = 1;
            if (minPiecesObject != null && minPiecesObject.getMinimunAmount() > 0) {
                minPieces = minPiecesObject.getMinimunAmount();
            }
            QuantityMoreSelectorDialog.createQuantitySelectDialog(getActivity(), QuantityMoreSelectorDialog.TAG, minPieces, true, new QuantityMoreSelectorDialog.onClickListenerQuantityMore() {

                @Override
                public void onConfirmQuantity(String quantity) {
                    txtQuantity.setText(quantity);
                }
            });
        }

        //TODO: DELETE WHEN NEW FUNCTIONALITY IS TESTED SUCESSFULLY ONE PAGE RELEASE

//            if (!txtQuantity.getText().toString().equalsIgnoreCase(""))
//                lastValue = Integer.parseInt(txtQuantity.getText().toString());
//            txtQuantity.addTextChangedListener(new TextWatcher() {
//                @Override
//                public void onTextChanged(CharSequence s, int start, int before, int count) {
//                    int length_loan = txtQuantity.getText().toString().length();
//                    if (length_loan == 1 && txtQuantity.getText().toString().equalsIgnoreCase("0"))
//                        txtQuantity.setText("");
//                }
//
//                @Override
//                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
//
//                }
//
//                @Override
//                public void afterTextChanged(Editable s) {
//
//                }
//            });
//
//            txtQuantity.setFocusableInTouchMode(true);
//            txtQuantity.setText("");
//            txtQuantity.setKeyListener(keyListener);
//            txtQuantity.setImeOptions(EditorInfo.IME_ACTION_DONE);
//            txtQuantity.requestFocus();
//            AppContext.getInstance().getCurrentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//
//        }
    };

    public boolean isStoragePermissionGranted() {
        if (Build.VERSION.SDK_INT >= 23) {
            if (AppContext.getInstance().getCurrentActivity().checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED) {
                Log.v(TAG, "Permission is granted");
                return true;
            } else {

                Log.v(TAG, "Permission is revoked");
                ActivityCompat.requestPermissions(AppContext.getInstance().getCurrentActivity(), new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, Constants.REQUEST_PERMISION_WRITE_PDP);
                return false;
            }
        } else { //permission is automatically granted on sdk<23 upon installation
            Log.v(TAG, "Permission is granted");
            return true;
        }
    }

    @Override
    public void onControllerUpdateNotification(@NonNull String updateActionId, @Nullable Object updateParams) {
        super.onControllerUpdateNotification(updateActionId, updateParams);
        if (updateActionId.equalsIgnoreCase(UPDATE_GALLERY_INTERACTION)) {
            ArrayList<String> urls = controller.getProductBasicDetailsModel().getImages();
            urls.add(controller.getProductDetailDto().getProductInfo().getVideoLink());
            updateGalleryImages(urls);
        } else if (updateActionId.equalsIgnoreCase(RESET_GALLERY_INTERACTION)) {
            resetGallery();
        }
    }

    private synchronized void updateGalleryImages(List<String> urls) {

        try {
            itrStock(controller.getCurrentSKU(), controller.currentVariant.getOfferId());
        } catch (Exception ex) {
            itrStock(controller.getCurrentSKU(), "");
        }

        urlImages.clear();
        list.clear();
        if (null == urls || urls.isEmpty()) {
            if (data.getProductInfo().getImages() != null) {
                if (data.getProductInfo().getImages().getXl() != null) {
                    if (!data.getProductInfo().getImages().getXl().equalsIgnoreCase("")) {
                        urls.add(data.getProductInfo().getImages().getXl());
                        GalleryPdpObject g = new GalleryPdpObject(data.getProductInfo().getImages().getXl(), false);
                        list.add(g);
                    }
                }
            }
        }

        if (null != urls && urls.size() > 1) {
            try {
                if (urls.get(0).equalsIgnoreCase(urls.get(1))) {
                    urls.remove(1);
                } else if (urls.get(0).replace("https", "http").equalsIgnoreCase(urls.get(1))) {
                    urls.remove(1);
                }
            } catch (Exception e) {
                Log.w(LOG_TAG, "Error elements");
            }
        }

        ArrayList<String> urlClone = new ArrayList<>(cloneList(urls));
        ArrayList<String> urlResult = new ArrayList<>();

        if (urls.size() > 1) {
            do {
                for (int w = 1; w < urlClone.size(); w++) {
                    if (URLUtil.guessFileName(urlClone.get(0), null, null).equalsIgnoreCase(URLUtil.guessFileName(urlClone.get(w), null, null))) {
                        urlClone.remove(w);
                    }
                }
                urlResult.add(urlClone.get(0));
                urlClone.remove(0);
            } while (urlClone.size() > 1);
            try {
                urlResult.add(urlClone.get(0));
                urlClone.remove(0);
            } catch (Exception e) {
                Log.w(LOG_TAG, "Error elements");
            }

        } else {
            urlResult.addAll(cloneList(urls));
        }

        urlImages.clear();
        urlImages.addAll(cloneList(urlResult));
        list.clear();
        for (String url : urlResult) {
            if (null != url && !url.equalsIgnoreCase("") && !url.contains("youtube.com")) {
                GalleryPdpObject g = new GalleryPdpObject(url, false);
                list.add(g);
            }
        }

        if (null != data.getProductInfo().getVideoLink() &&
                !data.getProductInfo().toString().equalsIgnoreCase("")) {
            GalleryPdpObject g = new GalleryPdpObject(data.getProductInfo().getVideoLink(), true);
            list.add(g);

        }

        sliderLayout.reloadImages();

    }

    private AddCollectionItemsParams getCollectionItemParams() {
        AddCollectionItemsParams addCollectionItemsParams = new AddCollectionItemsParams();
        List<CollectionProduct> collectionProducts = new ArrayList<>();
        CollectionProduct collectionProduct = new CollectionProduct();

        collectionProduct.setProductId("");
        collectionProduct.setProductType("");
        collectionProduct.setPromotionalGiftMessage("");
        collectionProduct.setSpecialSale(false);
        collectionProduct.setSize("");
        collectionProduct.setQuantity(1);
        collectionProduct.setGiftSku("");
        collectionProduct.setGiftProductId("");
        collectionProduct.setGiftProductType("");
        collectionProduct.setColor("");
        collectionProduct.setImageURL("");
        //collectionProduct.setListPrice(0.0);
        //collectionProduct.setSalePrice(0.0);

        if (controller.isMarketPlaceProduct) {

            Double listPrice = controller.getCurrentVariant().getListPrice();
            Double promoPrice = null;

            if (Toolbox.isPriceValid(controller.getCurrentVariant().getSalePrice()) && controller.getCurrentVariant().getSalePrice() < listPrice)
                listPrice = controller.getCurrentVariant().getSalePrice();
            if (Toolbox.isPriceValid(controller.getCurrentVariant().getPromoPrice()) && controller.getCurrentVariant().getPromoPrice() < listPrice)
                promoPrice = controller.getCurrentVariant().getPromoPrice();

            collectionProduct.setSalePrice((null != promoPrice && promoPrice < listPrice) ? promoPrice : listPrice);
            collectionProduct.setListPrice((null != controller.getCurrentVariant().getSalePrice() && controller.getCurrentVariant().getSalePrice() > controller.getCurrentVariant().getListPrice()) ? controller.getCurrentVariant().getListPrice() : controller.getCurrentVariant().getSalePrice());
        } else {

            collectionProduct.setListPrice((null != controller.getProductDetailDto().getProductInfo().getListPrice()) ? controller.getProductDetailDto().getProductInfo().getListPrice() : 0.0);
            collectionProduct.setSalePrice((null != controller.getProductDetailDto().getProductInfo().getSalePrice()) ? controller.getProductDetailDto().getProductInfo().getSalePrice() : 0.0);
        }

        collectionProduct.setSku("");
        collectionProduct.setEstimatedDeliveryDate("");
        collectionProduct.setDisplayName("");
        collectionProduct.setEddZipCode("");
        if (controller.getProductBasicDetailsModel().isHybrid()) {
            collectionProduct.setHybrid(controller.getProductBasicDetailsModel().isHybrid());
            if (!TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_plataform)))) {
                collectionProduct.setPlatform(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_plataform)));
            }
            if (!TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_edition)))) {
                collectionProduct.setEdition(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_edition)));
            }
            if (!TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_format)))) {
                collectionProduct.setFormat(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_format)));
            }
            if (!TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_license)))) {
                collectionProduct.setLicense(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_license)));
            }
            if (!TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_validity)))) {
                collectionProduct.setValidity(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_validity)));
            }
            if (!TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_language)))) {
                collectionProduct.setLanguage(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_language)));
            }
        } else {

            if (controller.getCurrentVariant() != null) {
                if (controller.getCurrentVariant().getSize() != null) {
                    collectionProduct.setSize(controller.getCurrentVariant().getSize());
                }
            }

            if (controller.getCurrentVariant() != null) {
                if (controller.getCurrentVariant().getSize() != null) {
                    collectionProduct.setColor(controller.getCurrentVariant().getColorHex());
                }
            }
        }
        collectionProduct.setDisplayName(data.getProductInfo().getDisplayName());

        collectionProduct.setImageURL(data.getProductInfo().getImages().getXl());

        if (txtQuantity.getText().toString().equalsIgnoreCase("") || controller.digital)
            txtQuantity.setText("1");

        collectionProduct.setQuantity(Integer.parseInt(txtQuantity.getText().toString()));

        collectionProduct.setSpecialSale(false);

        if (controller.productDetailDto.getProductInfo().getEddInfo().getSpecialSale()) {
            collectionProduct.setSpecialSale(true);
        }

        if (controller.getFlagPresale()) {
            collectionProduct.setEstimatedDeliveryDate(getString(R.string.pdp_delivery_date_not_available));
            collectionProduct.setSpecialSale(true);
        } else {
            if (controller.productDetailDto.getProductInfo().getEddInfo() != null && controller.productDetailDto.getProductInfo().getEddInfo().getEddEnabled()) {
                collectionProduct.setEstimatedDeliveryDate(controller.productDetailDto.getProductInfo().getEddInfo().getEdd());
            }
            if (controller.getCP() != null) {
                if (!controller.getCP().isEmpty()) {
                    collectionProduct.setEddZipCode(controller.getCP());
                }
            }
            if (controller.getStoreId() != null) {
                if (!controller.getStoreId().isEmpty()) {
                    collectionProduct.setStoreNumber(controller.getStoreId());
                }
            }
        }

        if (controller.getProductBasicDetailsModel().getEddModel().getDeliveryDateRangeAvailable()) {
            collectionProduct.setEstimatedDeliveryDate(controller.getProductBasicDetailsModel().getEddModel().getEstimatedDateRange());
            Log.w(LOG_TAG, "Agregando Edd: " + controller.getProductBasicDetailsModel().getEddModel().getEstimatedDateRange());
        }
        collectionProduct.setSku(controller.getCurrentSKU());

        if (controller.getGiftSelected() != null) {

            collectionProduct.setProductId(data.getProductInfo().getProductId());
            collectionProduct.setGiftProductId(controller.getGiftSelected().getProductId());

            collectionProduct.setGiftProductType(controller.getGiftSelected().getProductType());
            collectionProduct.setGiftSku(controller.getGiftSelected().getAssociatedSkuId());
            collectionProduct.setPromotionalGiftMessage(data.getProductInfo().getGwp().getPromotionalGiftMessage());

        } else {
            collectionProduct.setProductId(data.getProductInfo().getProductId());
        }
        String type = (null != controller.getDynamicAttributesLogic()) ? ((!controller.getDynamicAttributesLogic().getModel().getType().equalsIgnoreCase("")) ? controller.getDynamicAttributesLogic().getModel().getType() : data.getProductInfo().getType()) : data.getProductInfo().getType();
        if (type.equalsIgnoreCase(Constants.ATTRIBUTE_DYNAMIC_PHYSICAL)) {
            type = "Soft Line";
        }
        collectionProduct.setProductType(type);

        if (null == collectionProduct.getSku()) {
            collectionProduct.setSku(data.getProductInfo().getDefaultSkuId());
        }
        if (null == collectionProduct.getSku()) {
            collectionProduct.setSku(data.getProductInfo().getProductId());
        }
        if (collectionProduct.getSku().equalsIgnoreCase("")) {
            collectionProduct.setSku(data.getProductInfo().getProductId());
        }

        if (controller.getProductDetailDto().getProductInfo().getEddInfo() != null) {
            if (controller.getProductDetailDto().getProductInfo().getEddInfo().getSpecialSale() != null) {
                if (controller.getProductDetailDto().getProductInfo().getEddInfo().getSpecialSale() && !controller.getProductBasicDetailsModel().getEddModel().getDeliveryDateRangeAvailable())
                    collectionProduct.setEstimatedDeliveryDate(null);
            }
        }

        if (controller.isMarketPlaceProduct) {
            collectionProduct.setSellerId(controller.getCurrentVariant().getSellerId());
            collectionProduct.setSellerOperatorId(controller.getCurrentVariant().getSellerOperatorId());
            collectionProduct.setSellerSkuId(controller.getCurrentVariant().getSellerSkuId());
            collectionProduct.setSellerName(controller.getCurrentVariant().getBestSeller());
            collectionProduct.setOfferId(controller.getCurrentVariant().getOfferId());
        }
        collectionProducts.add(collectionProduct);
        addCollectionItemsParams.setCollectionProducts(collectionProducts);

        if (null != AppContext.getInstance().getGlobalParams().get(AppContext.EDD_DUMMY_MARKETPLACE_IS_CC) && BooleanUtils.isTrue(controller.getProductDetailDto().getProductInfo().isMarketPlace())) {
            boolean isMarketCC = (boolean) AppContext.getInstance().getGlobalParams().get(AppContext.EDD_DUMMY_MARKETPLACE_IS_CC);
            collectionProduct.setEstimatedDeliveryDate(isMarketCC ? controller.getEddMarketPlaceMessageCC() : controller.getEddMarketPlaceMessage());
        }
        return addCollectionItemsParams;
    }

    private void addProductBag() {
        commerceId = "";
        addCollectionItemsParams = getCollectionItemParams();

        if (controller.getGiftSelected() != null || (minPiecesObject != null && minPiecesObject.getMaxPieces() > 0)) {
            ScreenManager.getInstance().showProgressDialog(Utilities.getString(R.string.dialog_msg_load), R.id.fragment_container);
            WebServicesManager.getInstance().requestBagDetails(new AtgAdapterClientController.AtgAdapterClientListener() {
                @Override
                public void onSuccessResponse(AtgAdapterClient.Operation operation, AtgAdapterDto successResponseDto) {
                    BagDetailsDto bagDetailsDto = (BagDetailsDto) successResponseDto;
                    boolean existGift = false;
                    boolean maxPieces = false;
                    if (bagDetailsDto.getShoppingBagItems() != null) {
                        for (BagItem bagItem : bagDetailsDto.getShoppingBagItems()) {
                            for (BagProduct bagProduct : bagItem.getProducts()) {
                                if (controller.getGiftSelected() != null) {
                                    if (bagProduct.getPromotionalParentSkuId() != null && bagProduct.getPromotionalParentSkuId().equalsIgnoreCase(controller.getCurrentSKU())) {
                                        for (Gift gift : data.getProductInfo().getGwp().getGifts()) {
                                            if (bagProduct.getProductId().equalsIgnoreCase(gift.getProductId())) {
                                                newQuantity = bagProduct.getBasicInformation().getQuantity();
                                                existGift = true;
                                            }
                                        }
                                    }

                                    if (bagProduct.getProductId().equalsIgnoreCase(data.getProductInfo().getProductId())) {
                                        commerceId = bagProduct.getCommerceItemId();
                                    }
                                }

                                if (minPiecesObject != null && minPiecesObject.getSku().equalsIgnoreCase(bagProduct.getProductId())) {
                                    int quantity = bagProduct.getBasicInformation().getQuantity() + Integer.parseInt(txtQuantity.getText().toString());

                                    if (quantity > minPiecesObject.getMaxPieces()) {
                                        maxPieces = true;
                                        AlertUtil.showMessageAccept(AppContext.getInstance().getContext(), null,
                                                getResources().getQuantityString(R.plurals.alert_max_pieces, minPiecesObject.getMaxPieces(), minPiecesObject.getMaxPieces()),
                                                R.string.aceptar, null);

                                    }
                                }
                            }
                        }
                    }

                    if (existGift && !controller.digital) {

                        int value = Integer.parseInt(txtQuantity.getText().toString()) + newQuantity;
                        controller.updateShoppingBag(commerceId, "" + value);
                    } else if (!maxPieces) {
                        controller.addProduct(addCollectionItemsParams);
                    } else {
                        hideProgressDialog();
                    }

                }

                @Override
                public void onErrorResponse(AtgAdapterClient.Operation operation, AtgAdapterDto errorResponseDto) {

                }
            });
        } else {
            controller.addProduct(addCollectionItemsParams);
        }

    }

    @Override
    public void onDataLoadFinished(AtgAdapterDto obj, AtgAdapterClient.Operation operation) {


        if (operation == AtgAdapterClient.Operation.GetSellersOfferDetailsPdp) {
            if (null != obj && obj.getStatus().getStatusCode() == 0 && obj instanceof GetSellersOfferDetailsPdpDto) {
                GetSellersOfferDetailsPdpDto offers = (GetSellersOfferDetailsPdpDto) obj;
            }
        } else if (operation == AtgAdapterClient.Operation.GetAllOfferPdp) {
            if (null != obj && obj.getStatus().getStatusCode() == 0 && obj instanceof GetAllOffersPdpDto) {
                GetAllOffersPdpDto offers = (GetAllOffersPdpDto) obj;
                controller.checkMarketPlace();
            } else {
                controller.checkMarketPlace();
            }
        } else if (operation == AtgAdapterClient.Operation.UpdateProductShoppingBag) {
            interactionListener.bagAnimationUpdate();
            boolean alert = false;

            if (obj.getStatus().getStatusCode() == 0) {
                if (obj.getStatus().getErrorDescription() != null) {
                    alert = true;
                }
            }

            if (gotoStep0) {
                startCheckout();
                if (alert) {
                    AppContext.getInstance().getCurrentActivity().showAlert(true, getString(R.string.aviso), obj.getStatus().getErrorDescription());
                }
            } else {

                showAlert((TextUtils.isEmpty(obj.getStatus().getErrorDescription())) ? "" : obj.getStatus().getErrorDescription());
                /*
                Double listPrice = (controller.isMarketPlaceProduct) ? controller.getCurrentVariant().getListPrice() : data.getProductInfo().getListPrice();
                Double promoPrice = null;

                if (controller.isMarketPlaceProduct) {
                    if (Toolbox.isPriceValid(controller.getCurrentVariant().getSalePrice()) && controller.getCurrentVariant().getSalePrice() < listPrice)
                        listPrice = controller.getCurrentVariant().getSalePrice();
                    if (Toolbox.isPriceValid(controller.getCurrentVariant().getPromoPrice()) && controller.getCurrentVariant().getPromoPrice() < listPrice)
                        promoPrice = controller.getCurrentVariant().getPromoPrice();
                } else {
                    if (Toolbox.isPriceValid(data.getProductInfo().getSalePrice()) && data.getProductInfo().getSalePrice() < listPrice)
                        listPrice = data.getProductInfo().getSalePrice();
                    if (Toolbox.isPriceValid(data.getProductInfo().getPromoPrice()) && data.getProductInfo().getPromoPrice() < listPrice)
                        promoPrice = data.getProductInfo().getPromoPrice();
                }


                Double price = listPrice;
                Double discount = 0.0;
                if (null != promoPrice) {
                    price = promoPrice;
                    discount = listPrice - promoPrice;
                }

                AddedCollectionDto addedCollectionDto = new AddedCollectionDto();
                AddedCollectionTotal addedCollectionTotal = new AddedCollectionTotal();
                addedCollectionTotal.setTotal(price);
                addedCollectionTotal.setSubtotal(price);
                addedCollectionTotal.setProductsQuantity(Integer.parseInt(txtQuantity.getText().toString()) * 2);
                addedCollectionTotal.setDiscount(discount);
                addedCollectionDto.setTotal(addedCollectionTotal);

                List<AddedCollectionProductDetail> addedCollectionProductDetails = new ArrayList<>();
                AddedCollectionProductDetail addedCollectionProductDetail = new AddedCollectionProductDetail();
                addedCollectionProductDetail.setSalePrice(data.getProductInfo().getSalePrice());
                addedCollectionProductDetail.setQuantity(Integer.parseInt(txtQuantity.getText().toString()));
                addedCollectionProductDetail.setListPriceWithDiscount(listPrice - discount);
                addedCollectionProductDetail.setListPrice(listPrice);
                addedCollectionProductDetail.setDisplayName(data.getProductInfo().getDisplayName());
                addedCollectionProductDetail.setImageURL(data.getProductInfo().getImages().getXl());

                AddedCollectionProductDetail addedCollectionProductDetailGift = new AddedCollectionProductDetail();
                addedCollectionProductDetailGift.setSalePrice(PRICE_GIFT);
                addedCollectionProductDetailGift.setQuantity(Integer.parseInt(txtQuantity.getText().toString()));
                addedCollectionProductDetailGift.setListPriceWithDiscount(PRICE_GIFT);
                addedCollectionProductDetailGift.setListPrice(PRICE_GIFT);
                addedCollectionProductDetailGift.setDisplayName(controller.getGiftSelected().getGiftDescription());
                addedCollectionProductDetailGift.setImageURL(controller.getGiftSelected().getPromoXLImageURL());

                addedCollectionProductDetails.add(addedCollectionProductDetail);
                addedCollectionProductDetails.add(addedCollectionProductDetailGift);

                addedCollectionDto.setAddedProductsDetails(addedCollectionProductDetails);

                showPreviewGroupId(addedCollectionDto, alert);*/
            }

        } else if (obj instanceof SharingDataDto) {
            final String url = ((SharingDataDto) obj).getShareUrl();
            final String name = ((SharingDataDto) obj).getProductDisplayName();
            Picasso.with(getContext()).load(((SharingDataDto) obj).getSkuLargeImage()).into(new Target() {
                @Override
                public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {
                    String filepath = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + "liverpool";
                    File dir = new File(filepath);
                    if (!dir.exists()) {
                        dir.mkdirs();
                    }
                    File file = new File(dir, data.getProductInfo().getProductId() + ".png");
                    file.deleteOnExit();
                    if (file.exists()) {
                        if (file.delete()) {
                            //TODO: Body is empty
                        }
                    }
                    FileOutputStream fileOutputStream;
                    try {
                        fileOutputStream = new FileOutputStream(file);
                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
                        fileOutputStream.flush();
                        fileOutputStream.close();
                        //Se quita peticion a url corta
                        //controller.getShortLink(url, getContext(), name, file);
                        try {
                            ScreenManager.getInstance().deleteProgressDialog();
                        } catch (Exception e) {
                            //TODO: Some Catch are empty
                        }
                        String message = url + "\n" + name + "\n" + url;
                        Intent share = new Intent(Intent.ACTION_SEND);
                        share.setType("image/*");

                        String authority = getContext().getApplicationContext().getPackageName() + ".provider";

                        share.putExtra(Intent.EXTRA_STREAM, FileProvider.getUriForFile(getContext(), authority, file));
                        share.putExtra(Intent.EXTRA_TEXT, message);
                        startActivity(Intent.createChooser(share, getString(R.string.pdp_title_share)));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onBitmapFailed(Drawable errorDrawable) {
                    ScreenManager.getInstance().deleteProgressDialog();
                }

                @Override
                public void onPrepareLoad(Drawable placeHolderDrawable) {
                    ScreenManager.getInstance().deleteProgressDialog();
                }
            });
        } else if (obj instanceof BagDetailsDto) {
            BagDetailsDto bagDetailsDto = (BagDetailsDto) obj;
            if (bagDetailsDto.getShoppingBagItems() != null) {
                for (BagItem bagItem : bagDetailsDto.getShoppingBagItems()) {
                    for (BagProduct bagProduct : bagItem.getProducts()) {
                        if (bagProduct.getPromotionalParentSkuId() != null && bagProduct.getPromotionalParentSkuId().equalsIgnoreCase(controller.getCurrentSKU())) {
                            int i = 0;
                            for (Gift gift : data.getProductInfo().getGwp().getGifts()) {
                                if (bagProduct.getProductId().equalsIgnoreCase(gift.getProductId())) {
                                    data.getProductInfo().getGwp().getGifts().get(i).setPromotionGiftSkuAvailable(true);
                                    controller.setGiftSelected(gift);
                                } else {
                                    data.getProductInfo().getGwp().getGifts().get(i).setPromotionGiftSkuAvailable(false);
                                }
                                i++;
                            }
                        }
                    }
                }
            }
            controller.gwp();
        } else if (obj instanceof ItrStatusDto) {

            setStock(0, false, "");
            switch (operation) {
                case GetItrStatus:
                case GetItrStatusMP:
                    ItrStatusDto itrStatusDto = (ItrStatusDto) obj;
                    if (itrStatusDto.getStatus().getStatusCode() == Constants.OPERATION_SUCCESS) {
                        if (itrStatusDto.getItrStatuses() != null) {
                            try {
                                itrStatusDto.getItrStatuses().size();
                                if (itrStatusDto.getItrStatuses().get(0).getStockStatus().equalsIgnoreCase(IN_STOCK_THRESHOLD)) {
                                    setStock(itrStatusDto.getItrStatuses().get(0).getQuantity(), true, IN_STOCK_THRESHOLD);
                                } else if (itrStatusDto.getItrStatuses().get(0).getStockStatus().equalsIgnoreCase(OUT_OF_STOCK)) {
                                    setStock(itrStatusDto.getItrStatuses().get(0).getQuantity(), true, OUT_OF_STOCK);
                                }
                            } catch (Exception e) { }
                        }
                    }
                    break;
                default:
                    AppContext.getInstance().getCurrentActivity().showAlert(true, getString(R.string.aviso), obj.getStatus().getErrorDescription());
            }

        } else if (operation == AtgAdapterClient.Operation.GetUserEvents) {
            handleEventsResult((GetUserEventsDto) obj);
        } else if (obj != null) {
            if (obj.getStatus().getStatusCode() == 0) {
                interactionListener.bagAnimationUpdate();
                ScreenManager.getInstance().deleteProgressDialog();
                if (gotoStep0) {
                    startCheckout();
                    /*----------------------------------Tracking--------------------------------------*/
                    Double listPrice = data.getProductInfo().getListPrice();
                    Double promoPrice = null;
                    if (Toolbox.isPriceValid(data.getProductInfo().getSalePrice()) && data.getProductInfo().getSalePrice() < listPrice)
                        listPrice = data.getProductInfo().getSalePrice();
                    if (Toolbox.isPriceValid(data.getProductInfo().getPromoPrice()) && data.getProductInfo().getPromoPrice() < listPrice)
                        promoPrice = data.getProductInfo().getPromoPrice();

                    Double price = listPrice;
                    if (null != promoPrice) {
                        price = promoPrice;
                    }

                    String quantity = "1";
                    if (null != txtQuantity && !txtQuantity.getText().toString().equals(""))
                        quantity = txtQuantity.getText().toString();

                    String priceString = String.valueOf(price);
                    TrackingManager.getInstance().trackingPayNow(
                            controller.getCurrentSKU(),
                            data.getProductInfo().getDisplayName(),
                            data.getProductInfo().getFirstLevelParent(),
                            quantity,
                            priceString
                    );

                    String quantityString = "1";
                    if (null != txtQuantity && !txtQuantity.getText().toString().isEmpty())
                        quantityString = txtQuantity.getText().toString();
                    String dm45 = "N";
                    String actualSize = controller.getVariantsController() == null ? "" : controller.getVariantsController().getVariantBySku(controller.getCurrentSKU()).getSize();
                    String dm44 = "";
                    if (sizeTag != null) {
                        dm44 = (!TextUtils.isEmpty(sizeTag.getDisplaySize())) ? sizeTag.getDisplaySize() : "";
                        if(recomendadorSZ){
                            dm45 = "Y";
                        }
                        sizeTag.setProductId(controller.getProductId());
                        AppContext.setSizes(sizeTag);
                    }
                    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    @team GAPSI
                    @project Tagging Analytics
                    @author sgarcia
                    @dateTime 14/04/2020 11:45
                    @desc migración evento add_to_cart
                    @observations Faltan atributos
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                    /*TrackingManager.getInstance().trackingAddToCar(
                            data.getProductInfo().getDefaultSkuId(),
                            data.getProductInfo().getDisplayName(),
                            data.getProductInfo().getFirstLevelParent(),
                            quantityString,
                            priceString,
                            "",
                            controller.getCurrentSKU(),
                            dm44,
                            dm45,
                            actualSize);*/
                        List<String> evars = new ArrayList<String>();
                        String vendor = !TextUtils.isEmpty(data.getProductInfo().getSellerName())? "marketplace - "+ data.getProductInfo().getSellerName(): "Liverpool";
                        Bundle bundle = new Bundle();
                        bundle.putString(getString(R.string.eventCategory), "ecommerce");
                        bundle.putString(getString(R.string.eventAction), "addToCart");
                        if(recomendadorSZ){
                            bundle.putString(getString(R.string.eventLabel), getString(R.string.aceptotalla));
                        } else {
                            bundle.putString(getString(R.string.eventLabel), "Comprar ahora");
                        }
                        bundle.putString(getString(R.string.qty_analytics), quantityString);
                        bundle.putString(getString(R.string.name_analytics), data.getProductInfo().getDisplayName());
                        bundle.putString(getString(R.string.sku_generic), data.getProductInfo().getProductId());
                        bundle.putString(getString(R.string.category_analytics), data.getProductInfo().getFirstLevelParent());
                        bundle.putString(getString(R.string.variant), "N/A");
                        bundle.putString(getString(R.string.brand), data.getProductInfo().getBrand());
                        bundle.putString(getString(R.string.price), String.valueOf(data.getVariantsInfo().get(0).getSalePrice()));
                        bundle.putString(getString(R.string.MarketPlace), vendor);
                        bundle.putString(getString(R.string.priceBase), String.valueOf(data.getVariantsInfo().get(0).getListPrice()));
                        bundle.putString(getString(R.string.priceWithTax), "0");
                        bundle.putString(getString(R.string.talla), actualSize);
                        bundle.putString(getString(R.string.color), actualColorTag);
                        bundle.putString(getString(R.string.sku_specific), data.getVariantsInfo().get(0).getSku());
                        bundle.putString(getString(R.string.material_analytics), actualMaterial);
                        bundle.putString(getString(R.string.texture), actualTexture);
                        bundle.putString(getString(R.string.recommendedSize), dm44);
                        bundle.putString(getString(R.string.recommenderAttribution), dm45);
                        bundle.putString("addToCart", "1");

                        if(!TextUtils.isEmpty(data.getProductInfo().getDisplayName())){ evars.add("eVar13=" + data.getProductInfo().getDisplayName().replace(",", "").replace(";", "")); }
                        if(!TextUtils.isEmpty(data.getProductInfo().getProductId())){ evars.add("eVar21=" + data.getProductInfo().getProductId()); }
                        if(!TextUtils.isEmpty(data.getProductInfo().getCategoryName())){ evars.add("eVar23=" + data.getProductInfo().getCategoryName()  ); }
                        evars.add("eVar47=" + "N/A");
                        if(!TextUtils.isEmpty(data.getProductInfo().getBrand())){ evars.add("eVar16=" + data.getProductInfo().getBrand()); }
                        if(!TextUtils.isEmpty(String.valueOf(price))){ evars.add("eVar18=" + price); }
                        if(!TextUtils.isEmpty(vendor)){ evars.add("eVar41=" + vendor); }
                        if(!TextUtils.isEmpty(String.valueOf(listPrice))){ evars.add("eVar17=" +listPrice); }
                        evars.add("eVar19=" + 0);
                        if(!TextUtils.isEmpty(actualSize)){ evars.add("eVar20=" + actualSize); }
                        if(!TextUtils.isEmpty(actualColorTag)){ evars.add("eVar44=" + actualColorTag); }
                        if(!TextUtils.isEmpty(controller.getCurrentSKU())){ evars.add("eVar22=" + controller.getCurrentSKU()); }
                        if(!TextUtils.isEmpty(actualMaterial)){ evars.add("eVar45=" + actualMaterial); }
                        if(!TextUtils.isEmpty(actualTexture)){ evars.add("eVar46=" + actualTexture); }
                        if(!TextUtils.isEmpty(dm44)){ evars.add("eVar42=" + dm44); } else { evars.add("eVar42= null"); }
                        if(!TextUtils.isEmpty(dm45)){ evars.add("eVar43=" + dm45); }

                        bundle.putString("&&products", data.getProductInfo().getCategoryName() + ";"+ data.getProductInfo().getDisplayName().replace(",", "").replace(";", "") +";"+ quantityString +";"+ (data.getVariantsInfo().get(0).getSalePrice() * Integer.parseInt(quantityString)) +";;"+ TextUtils.join("|", evars));
                        LiverpoolAnalytics.publish(getString(R.string.addToCart), bundle, ShoppingAppApplication.getAppContext());
                    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                    /*--------------------------------------------------------------------------------*/
                } else {
                    /*----------------------------------Tracking--------------------------------------*/
                    Double listPrice = data.getProductInfo().getListPrice();
                    Double promoPrice = null;
                    if (Toolbox.isPriceValid(data.getProductInfo().getSalePrice()) && data.getProductInfo().getSalePrice() < listPrice)
                        listPrice = data.getProductInfo().getSalePrice();
                    if (Toolbox.isPriceValid(data.getProductInfo().getPromoPrice()) && data.getProductInfo().getPromoPrice() < listPrice)
                        promoPrice = data.getProductInfo().getPromoPrice();

                    if (listPrice == null)
                        listPrice = 0.0;

                    if (promoPrice == null)
                        promoPrice = 0.0;

                    Double price = listPrice;
                    if (null != promoPrice && promoPrice > 0.0) {
                        price = promoPrice;
                    }
                    String quantityString = "1";
                    if (null != txtQuantity && !txtQuantity.getText().toString().isEmpty())
                        quantityString = txtQuantity.getText().toString();

                    controller.checkGwp();
                    String dm45 = "N";
                    String actualSize = controller.getVariantsController() == null ? "" : controller.getVariantsController().getVariantBySku(controller.getCurrentSKU()).getSize();
                    String dm44 = "null";
                    if (sizeTag != null) {
                        dm44 = (!TextUtils.isEmpty(sizeTag.getDisplaySize())) ? sizeTag.getDisplaySize() : "";
                        if(recomendadorSZ){
                            dm45 = "Y";
                        }
                        sizeTag.setProductId(controller.getProductId());
                        AppContext.setSizes(sizeTag);
                    }
                    /*TrackingManager.getInstance().trackingAddToCar(
                            data.getProductInfo().getDefaultSkuId(),
                            data.getProductInfo().getDisplayName(),
                            data.getProductInfo().getFirstLevelParent(),
                            quantityString,
                            String.valueOf(price),
                            "",
                            controller.getCurrentSKU(),
                            dm44,
                            dm45,
                            actualSize);*/
                    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    @team GAPSI
                    @project Tagging Analytics
                    @author sgarcia
                    @dateTime 14/04/2020 11:45
                    @desc migración evento add_to_cart

                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                    String vendor = !TextUtils.isEmpty(data.getProductInfo().getSellerName())? "marketplace - "+ data.getProductInfo().getSellerName(): "Liverpool";
                    List<String> evars = new ArrayList<String>();
                    Bundle bundle = new Bundle();
                    bundle.putString(getString(R.string.eventCategory), "ecommerce");
                    bundle.putString(getString(R.string.eventAction), "addToCart");
                    if(recomendadorSZ){
                        bundle.putString(getString(R.string.eventLabel), getString(R.string.aceptotalla));
                    } else {
                        bundle.putString(getString(R.string.eventLabel), "add");
                    }
                    bundle.putString(getString(R.string.qty_analytics), quantityString);
                    bundle.putString(getString(R.string.name_analytics), data.getProductInfo().getDisplayName());
                    bundle.putString(getString(R.string.sku_generic), data.getProductInfo().getProductId());
                    bundle.putString(getString(R.string.category_analytics), data.getProductInfo().getCategoryName());
                    bundle.putString(getString(R.string.variant), "N/A");
                    bundle.putString(getString(R.string.brand), data.getProductInfo().getBrand());
                    bundle.putString(getString(R.string.price), String.valueOf(price));
                    bundle.putString(getString(R.string.MarketPlace), vendor);
                    bundle.putString(getString(R.string.priceBase), String.valueOf(listPrice));
                    bundle.putString(getString(R.string.priceWithTax), "0");
                    bundle.putString(getString(R.string.talla), actualSize);
                    bundle.putString(getString(R.string.color), actualColorTag);
                    bundle.putString(getString(R.string.sku_specific), controller.getCurrentSKU());
                    bundle.putString(getString(R.string.material_analytics), actualMaterial);
                    bundle.putString(getString(R.string.texture), actualTexture);
                    bundle.putString(getString(R.string.recommendedSize), dm44);
                    bundle.putString(getString(R.string.recommenderAttribution), dm45);
                    bundle.putString("addToCart", "1");

                    if(!TextUtils.isEmpty(data.getProductInfo().getDisplayName())){ evars.add("eVar13=" + data.getProductInfo().getDisplayName().replace(",", "").replace(";", "")); }
                    if(!TextUtils.isEmpty(data.getProductInfo().getProductId())){ evars.add("eVar21=" + data.getProductInfo().getProductId()); }
                    if(!TextUtils.isEmpty(data.getProductInfo().getCategoryName())){ evars.add("eVar23=" + data.getProductInfo().getCategoryName()  ); }
                    evars.add("eVar47=" + "N/A");
                    if(!TextUtils.isEmpty(data.getProductInfo().getBrand())){ evars.add("eVar16=" + data.getProductInfo().getBrand()); }
                    if(!TextUtils.isEmpty(String.valueOf(price))){ evars.add("eVar18=" + price); }
                    if(!TextUtils.isEmpty(vendor)){ evars.add("eVar41=" + vendor); }
                    if(!TextUtils.isEmpty(String.valueOf(listPrice))){ evars.add("eVar17=" +listPrice); }
                    evars.add("eVar19=" + 0);
                    if(!TextUtils.isEmpty(actualSize)){ evars.add("eVar20=" + actualSize); }
                    if(!TextUtils.isEmpty(actualColorTag)){ evars.add("eVar44=" + actualColorTag); }
                    if(!TextUtils.isEmpty(controller.getCurrentSKU())){ evars.add("eVar22=" + controller.getCurrentSKU()); }
                    if(!TextUtils.isEmpty(actualMaterial)){ evars.add("eVar45=" + actualMaterial); }
                    if(!TextUtils.isEmpty(actualTexture)){ evars.add("eVar46=" + actualTexture); }
                    if(!TextUtils.isEmpty(dm44)){ evars.add("eVar42=" + dm44); } else {evars.add("eVar42= null");}
                    if(!TextUtils.isEmpty(dm45)){ evars.add("eVar43=" + dm45); }

                    bundle.putString("&&products", data.getProductInfo().getCategoryName() + ";"+ data.getProductInfo().getDisplayName().replace(",", "").replace(";", "") +";"+ quantityString +";"+ (price * Integer.parseInt(quantityString)) +";;"+ TextUtils.join("|", evars));
                    LiverpoolAnalytics.publish(getString(R.string.addToCart), bundle, ShoppingAppApplication.getAppContext());
                    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                    /*--------------------------------------------------------------------------------*/
                    boolean alert = false;

                    try {
                        AddedCollectionDto addedCollectionDto = (AddedCollectionDto) obj;
                        if (null != addedCollectionDto.getAddedProductsDetails() && addedCollectionDto.getAddedProductsDetails().size() > 0) {
                            if (null != addedCollectionDto.getAddedProductsDetails().get(0).getQuantity() && Integer.valueOf(quantityString) > addedCollectionDto.getAddedProductsDetails().get(0).getQuantity()) {
                                alert = true;
                            }
                        }

                        showAlert((TextUtils.isEmpty(addedCollectionDto.getStatus().getErrorDescription())) ? "" : addedCollectionDto.getStatus().getErrorDescription());

                    } catch (Exception e) { }
                }
            }
        }
    }

    private void showAlert(String alert) {
        if (TextUtils.isEmpty(alert)) {
            showDoneAlertNotification(getString(R.string.pdp_add_bag_message), 0);
        } else {
            showErrorAlertNotification(alert);
        }
    }

    private void showSnackBarGiftAdded(){
        showDoneAlertNotification(getString(R.string.pdp_add_product_gift_table), 0);
    }

    private void handleEventsResult(GetUserEventsDto response) {
        ScreenManager.getInstance().deleteProgressDialog();
        if (response == null) {
            return;
        }
        if (response.isSuccessful()) {
            if (response.getEventList() != null) {
                AppContext.setUserEvents(response);
                try {
                    response.getEventList().get(0).setEventStatus(EventStatus.Active.getStatus());
                } catch (Exception e) {

                }
                MegaMenuController.excludeEventsByStatus(response.getEventList(),
                        EventStatus.ValidityOffActive.getStatus(),
                        EventStatus.Suspended.getStatus(),
                        EventStatus.Closed.getStatus(),
                        EventStatus.AdminProcess.getStatus(),
                        EventStatus.SuspendedForTime.getStatus(),
                        EventStatus.Deleted.getStatus(),
                        EventStatus.DeletedByFraud.getStatus(),
                        EventStatus.TemporaryClosed.getStatus());

                if (minPiecesObject != null && minPiecesObject.getCustom()) {
                    showGiftButton(false);
                } else
                    showGiftButton(isShow(response));

            } else {
                AppContext.getInstance().getCurrentActivity().showAlert(false, "", response.getStatus().getErrorDescription());
            }
        } else {
            AppContext.getInstance().getCurrentActivity().showAlert(false, "", response.getStatus().getErrorDescription());
        }
    }

    private boolean isShow(GetUserEventsDto response) {
        int eventsActiveTotal = 0;
        for (EventInfoDto eventInfoDto : AppContext.getUserEvents().getEventList()) {
            if (!eventInfoDto.getEventStatus().equals("Cerrado"))
                eventsActiveTotal += 1;
        }
        return null != response.getEventList() && response.getEventList().size() > 0 && eventsActiveTotal > 0;
    }

    public void showPreviewGroupId(AddedCollectionDto addedCollectionDto, boolean showAlert) {

        List<ProductsShipmentModel> productsShipmentModelList = new ArrayList<>();

        for (int i = 0; i < addedCollectionDto.getAddedProductsDetails().size(); i++) {
            ProductsShipmentModel productsShipmentModel = new ProductsShipmentModel();
            productsShipmentModel.setIsFromGR(false);
            productsShipmentModel.setQuantity("" + addedCollectionDto.getAddedProductsDetails().get(i).getQuantity());
            productsShipmentModel.setSize(addedCollectionDto.getAddedProductsDetails().get(i).getSize());
            if (!TextUtils.isEmpty(addedCollectionDto.getAddedProductsDetails().get(i).getSize())) {
                productsShipmentModel.setExistsSize(true);
            }
            productsShipmentModel.setTitle(addedCollectionDto.getAddedProductsDetails().get(i).getDisplayName());
            productsShipmentModel.setUrlImage(addedCollectionDto.getAddedProductsDetails().get(i).getImageURL());
            productsShipmentModel.setFistPrice("" + addedCollectionDto.getAddedProductsDetails().get(i).getListPrice());
            productsShipmentModel.setSecondPrice("" + addedCollectionDto.getAddedProductsDetails().get(i).getSalePrice());
            productsShipmentModel.setDiscountPrice("" + addedCollectionDto.getAddedProductsDetails().get(i).getListPriceWithDiscount());
            productsShipmentModel.setDigital(controller.digital);
            productsShipmentModel.setHybrid((null != controller.getProductDetailDto().getProductInfo().getHybrid()) ? controller.getProductDetailDto().getProductInfo().getHybrid() : false);
            if (null != controller.getDynamicAttributesLogic() && !TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_plataform)))) {
                productsShipmentModel.setExistsPlataform(true);
                productsShipmentModel.setPlataform(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_plataform)));
            }
            if (null != controller.getDynamicAttributesLogic() && !TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_edition)))) {

                productsShipmentModel.setExistsEdition(true);
                productsShipmentModel.setEdition(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_edition)));
            }
            if (null != controller.getDynamicAttributesLogic() && !TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_format)))) {

                productsShipmentModel.setExistsFormat(true);
                productsShipmentModel.setFormat(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_format)));
            }
            if (null != controller.getDynamicAttributesLogic() && !TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_license)))) {
                productsShipmentModel.setExistsLicense(true);
                productsShipmentModel.setLicense(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_license)));

            }
            if (null != controller.getDynamicAttributesLogic() && !TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_validity)))) {
                productsShipmentModel.setExistsValidity(true);
                productsShipmentModel.setValidity(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_validity)));

            }
            if (null != controller.getDynamicAttributesLogic() && !TextUtils.isEmpty(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_language)))) {

                productsShipmentModel.setExistsLanguage(true);
                productsShipmentModel.setLanguage(controller.getDynamicAttributesLogic().getAttributeSelected(Utilities.getString(R.string.attribute_dynamic_language)));
            }
            productsShipmentModelList.add(productsShipmentModel);
        }

        PreviewGroupIdDialogFragment preview = new PreviewGroupIdDialogFragment();
        Bundle bundle = new Bundle();
        bundle.putParcelableArrayList(PreviewGroupIdDialogFragment.GROUP_ID_PRODUCTS, (ArrayList<? extends Parcelable>) productsShipmentModelList);
        bundle.putInt(QUANTITY, addedCollectionDto.getTotal().getProductsQuantity());
        bundle.putDouble(SUBTOTAL, addedCollectionDto.getTotal().getSubtotal());
        bundle.putDouble(TOTAL, addedCollectionDto.getTotal().getTotal());
        bundle.putDouble(DISCOUNT, addedCollectionDto.getTotal().getDiscount());
        bundle.putBoolean(ALERT, showAlert);
        preview.setArguments(bundle);
        preview.show(AppContext.getInstance().getCurrentActivity().getSupportFragmentManager(), "PreviewGroupIdDialogFragment");
    }

    @Override
    public void onUrlShortShare(String urlShort, String displayName, String shareUrl, File file) {
        try {
            ScreenManager.getInstance().deleteProgressDialog();
        } catch (Exception e) {
        }
        String message = urlShort + "\n" + displayName + "\n" + shareUrl;
        Intent share = new Intent(Intent.ACTION_SEND);
        share.setType("image/*");

        String authority = getContext().getApplicationContext().getPackageName() + ".provider";

        share.putExtra(Intent.EXTRA_STREAM, FileProvider.getUriForFile(getContext(), authority, file));
        share.putExtra(Intent.EXTRA_TEXT, message);
        startActivity(Intent.createChooser(share, getString(R.string.pdp_title_share)));
    }

    private String variantName(String v) {
        switch (v) {
            case Constants.VARIANT_COLOR:
                return Utilities.getString(R.string.str_variants_color);
            case Constants.VARIANT_SIZE:
                return Utilities.getString(R.string.str_variants_size);
            case Constants.VARIANT_DIMENSION:
                return Utilities.getString(R.string.str_variants_dimension);
            case Constants.VARIANT_MATERIAL:
                return Utilities.getString(R.string.str_variants_material);
            case Constants.VARIANT_TEXTURE:
                return Utilities.getString(R.string.str_variants_texture);
        }
        return v;
    }

    private static ArrayList<String> cloneList(List<String> list) {
        ArrayList<String> clone = new ArrayList<>(list.size());
        clone.addAll(list);
        return clone;
    }

    private void resetGallery() {
        list.clear();
        GalleryPdpObject g = new GalleryPdpObject("", false);
        list.add(g);
        sliderLayout.reloadImages();
    }

    @Override
    public void onPageScrolled(int i, float v, int i1) {
        Log.w(LOG_TAG, "Página scroleo: " + i);
    }

    @Override
    public void onPageSelected(int i) {
        Log.w(LOG_TAG, "Página selected: " + i);
    }

    @Override
    public void onPageScrollStateChanged(int i) {
        Log.w(LOG_TAG, "Página cambio: " + i);
    }

    public void showAttribute(AttributeDynamicObj attribute) {
        Intent intent = new Intent(AppContext.getInstance().getCurrentActivity(), DynamicAttributeSelectActivity.class);
        Bundle bundleVariants = new Bundle();
        bundleVariants.putSerializable(Constants.ATTRIBUTES_DYNAMIC, attribute);
        intent.putExtras(bundleVariants);
        startActivityForResult(intent, ScreenManager.Screens.MODAL.ordinal());
        AppContext.getInstance().getCurrentActivity().overridePendingTransition(R.anim.push_up_in, R.anim.hold);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        AppContext.getInstance().setCurrentActivity((BaseActivity) this.getActivity());

        if(requestCode == GIFT_TABLE_ADD){
            if(resultCode == RESULT_OK){
                final String currentEvent = Objects.requireNonNull(data.getExtras()).getString(Constants.GIFT_INFO_EVENT);
                final String currentMode = data.getExtras().getString(Constants.MODE_GIFT);
                controller.requestAddItemGift(currentEvent, buildAddItemToEvent(addCollectionItemsParams), new AtgAdapterClientController.AtgAdapterClientListener() {
                    @Override
                    public void onSuccessResponse(AtgAdapterClient.Operation operation, AtgAdapterDto successResponseDto) {
                        final ModalAddProductToGiftTableController giftTableController = new ModalAddProductToGiftTableController();
                        showSnackBarGiftAdded();
                        if (currentMode != null && currentMode.equals("electronic")) {
                            if (successResponseDto.isSuccessful() && successResponseDto instanceof AddItemToEventDto) {
                                String iteminfo = ((AddItemToEventDto) successResponseDto).getItemInfo().getGiftitemid();
                                giftTableController.changeModeGift(currentEvent, currentMode, iteminfo);
                            }
                        }
                    }

                    @Override
                    public void onErrorResponse(AtgAdapterClient.Operation operation, AtgAdapterDto errorResponseDto) {

                    }
                });
            }
        }

        if (requestCode == ScreenManager.Screens.MODAL.ordinal()) {
            if (null != data) {
                Bundle extras = data.getExtras();
                if (extras.getSerializable(Constants.ATTRIBUTES_DYNAMIC_DETAIL) != null && extras.getSerializable(Constants.ATTRIBUTES_DYNAMIC) != null) {
                    AttributeDynamicObj obj = (AttributeDynamicObj) extras.getSerializable(Constants.ATTRIBUTES_DYNAMIC);
                    AttributeDynamicObjDetail detail = (AttributeDynamicObjDetail) extras.getSerializable(Constants.ATTRIBUTES_DYNAMIC_DETAIL);
                    DynamicAttributesLogic logic = controller.getDynamicAttributesLogic();
                    if (null != logic) {
                        logic.selectAttribute(obj, detail);
                    }
                }
            }
        } else if (requestCode == GET_LOGIN_CODE) {
            if (resultCode == Activity.RESULT_OK) {
                if (isCollections) {
                    ModalCollectionPdpActivity activity = (ModalCollectionPdpActivity) AppContext.getInstance().getCurrentActivity();
                    activity.getToolbarModal().setVisibility(View.GONE);
                }

                ScreenManager.getInstance().showFragmentAnimation(reviews, "RatingsAndReviews");
            }
        } else if (requestCode == GET_EXPRESS_CHECKOUT_CODE){
            if(resultCode == Activity.RESULT_OK){
                validateExpressCheckout();
            }
        } else if (requestCode == ScreenManager.Screens.MODAL_FIT_ANALYTICS.ordinal() && data != null) {
            Bundle extras = data.getExtras();
            if (extras != null && extras.containsKey(ARG_SIZE_SELECTED)) {
                boolean addRecommendSizeToCart = extras.getBoolean(ARG_SETTING_SIZE_RECOMMEND, false);
                recomendadorSZ = addRecommendSizeToCart;
                settingSizeSelected((ObjectSize) extras.getParcelable(ARG_SIZE_SELECTED));
                if (validateCustomProduct() && addRecommendSizeToCart) {
                    validateToContinueToAddProductToBag(false, false);
                }
            }
        }
        else if (requestCode == GwpActivity.REQUEST_CODE && resultCode == Activity.RESULT_OK){
            controller.setGiftSelected((Gift) data.getExtras().getParcelable(GwpActivity.GIFT));
            controller.setGiftWithPurchaseModel((GiftWithPurchaseModel) data.getExtras().getParcelable(GwpActivity.GIFT_WITH_PURCHASE));
            controller.setProductDetailDto(GwpActivity.getProductDetailDto());

        }
    }

    public void showAlertErrorDigital(String error) {
        downloable_alert_text.setText(error);
        alertViewDownloable.setVisibility(View.VISIBLE);
    }

    private boolean isDigitalProduct() {
        return isDigitalProduct;
    }

    public void setDigitalProduct(boolean digitalProduct) {
        isDigitalProduct = digitalProduct;
    }

    public boolean isCollections() {
        return isCollections;
    }

    @Override
    public void paramHasChanged(boolean value) {
        if (!value)
            lnRatingsAndReviews.setVisibility(View.GONE);
    }

    public void updatePrices(ProductBasicDetailsModel basicDetailsModel) {
        if (controller.verifyVariants().equals("")) {
            linearPrice.setVisibility(basicDetailsModel.isStrikePriceAvailable() ? View.VISIBLE : View.GONE);
            txtGuion.setVisibility(View.GONE);
            txtMaxListPrice.setVisibility(View.GONE);
            txtMaxListPrice.setText("");
            txtMinListPrice.setText(basicDetailsModel.getProductMinListPrice());
            txtMinPromoPrice.setText(basicDetailsModel.getProductMinPromoPrice());
            txtGuion2.setVisibility(View.GONE);
            txtMaxPromoPrice.setVisibility(View.GONE);
            txtMaxPromoPrice.setText("");
        } else {
            linearPrice.setVisibility(basicDetailsModel.isStrikePriceAvailable() ? View.VISIBLE : View.GONE);
            txtGuion.setVisibility(basicDetailsModel.isHasListPriceRange() ? View.VISIBLE : View.GONE);
            txtMaxListPrice.setVisibility(basicDetailsModel.isHasListPriceRange() ? View.VISIBLE : View.GONE);
            txtMaxListPrice.setText(basicDetailsModel.getProductMaxListPrice());
            txtMinListPrice.setText(basicDetailsModel.getProductMinListPrice());
            txtMinPromoPrice.setText(basicDetailsModel.getProductMinPromoPrice());
            txtGuion2.setVisibility(basicDetailsModel.isHasPromoPriceRange() ? View.VISIBLE : View.GONE);
            txtMaxPromoPrice.setVisibility(basicDetailsModel.isHasPromoPriceRange() ? View.VISIBLE : View.GONE);
            txtMaxPromoPrice.setText(basicDetailsModel.getProductMaxPromoPrice());
        }
        // TODO AGREGAR CAMBIO DE SKU (CODIGO DE PRODUCTO)
    }

    @Override
    public void updateDataCustomProduct(CustomProductObj obj) {
        setStyleTextView(tvCustomProduct, obj);

        objCustomProduct = obj;
        validateCustomProduct();
        AppContext.getInstance().getCurrentActivity().showAlert(false, getString(R.string.aviso), getString(R.string.alert_pdp_custom_product_ok));

    }

    private boolean validateCustomProduct() {
        if (minPiecesObject != null && minPiecesObject.getCustom()) {
            if (btnCustomProduct.getVisibility() == View.VISIBLE && objCustomProduct != null) {
                saveCustomProduct();
                return true;
            } else {
                AppContext.getInstance().getCurrentActivity().showAlert(false, getString(R.string.aviso), getString(R.string.alert_pdp_custom_product_error), getString(R.string.alert_default_ok_text), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        goToModalCustomProduct();
                    }
                });

                return false;
            }
        }

        return true;
    }

    @Override
    public void onReviewAlreadySended() {
        AppContext.getInstance().getCurrentActivity().showAlert(true, getString(R.string.aviso), getString(R.string.alert_product_already_reviewed));
    }

    private CustomProductObj saveCustomProduct() {
        ArrayList<CustomProductObj> customProductObjs = AppContext.getInstance().getCustomProducts();
        boolean existProduct = false;

        if (customProductObjs != null && customProductObjs.size() > 0) {
            for (CustomProductObj customProductObj : customProductObjs) {
                if (customProductObj.getSku().equals(objCustomProduct.getSku())) {
                    customProductObjs.remove(customProductObj);
                    customProductObjs.add(objCustomProduct);
                    existProduct = true;
                    break;
                }
            }
        } else {
            customProductObjs = new ArrayList<>();
            customProductObjs.add(objCustomProduct);
            existProduct = true;
        }

        if (!existProduct)
            customProductObjs.add(objCustomProduct);

        AppContext.getInstance().setCustomProducts(customProductObjs);
        return objCustomProduct;
    }

    private void goToModalCustomProduct() {
        ModalCustomProductViewActivity modalCustomProductViewActivity = new ModalCustomProductViewActivity();
        ModalCustomProductViewActivity.dataCustomProduct = this;
        Intent intent = new Intent(AppContext.getInstance().getCurrentActivity(), modalCustomProductViewActivity.getClass());
        intent.putExtra("sku", controller.getProductId().trim());
        AppContext.getInstance().getCurrentActivity().startActivity(intent);
    }

    private void setCustomProduct() {
        ArrayList<CustomProductObj> customProductObjs = AppContext.getInstance().getCustomProducts();

        if (customProductObjs != null && customProductObjs.size() > 0) {
            for (CustomProductObj obj : customProductObjs) {
                if (obj.getSku().equals(controller.getProductId())) {
                    setStyleTextView(tvCustomProduct, obj);
                    objCustomProduct = obj;
                    break;
                }
            }
        }
    }

    private void setStyleTextView(TextView textView, CustomProductObj obj) {
        final SpannableString text = new SpannableString(getString(R.string.pdp_custom_product) + "\n" + obj.getText() + ", Color:" + obj.getColor() + ", " + obj.getFont());
        text.setSpan(new AbsoluteSizeSpan(45), getString(R.string.pdp_custom_product).length(), text.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        textView.setText(text);
    }

    private void validateToContinueToAddProductToBag(boolean goStep0, boolean express) {
        String variant = controller.verifyVariants();
        if (!variant.equals("")) {
            showErrorAlertNotification(Utilities.getString(R.string.message_variants) + " " + variantName(variant));
        } else {
            if (express) {
                validateExpressCheckout();
            } else {
                gotoStep0 = goStep0;
                addProductBag();
            }
        }
    }

    private void validateExpressCheckout() {
        if(AppContext.getInstance().isLoggedIn() && CheckoutManager.isActiveOnePage()){
            addCollectionItemsParams = getCollectionItemParams();
            this.appendParamsOnePage();
            controller.startCheckoutExpress(addCollectionItemsParams);
        } else if(CheckoutManager.isActiveOnePage()){
            startActivityForResult(new Intent(getActivity(), LoginActivity.class), GET_EXPRESS_CHECKOUT_CODE);
        } else {
            gotoStep0 = true;
            addProductBag();
        }
    }

    private void appendParamsOnePage(){
        CollectionProduct collectionProduct = addCollectionItemsParams.getCollectionProducts().get(0);

        String productType = collectionProduct.getProductType();

        if (controller.getGiftSelected() != null) {
            collectionProduct.setGiftProductType(controller.getGiftSelected().getProductType());
            collectionProduct.setGiftSku(controller.getGiftSelected().getAssociatedSkuId());
            collectionProduct.setPromotionalGiftMessage(data.getProductInfo().getGwp().getPromotionalGiftMessage());
            collectionProduct.setProductId(data.getProductInfo().getProductId() + ", "+ controller.getGiftSelected().getProductId());
            collectionProduct.setProductType(productType + ", "+controller.getGiftSelected().getProductType());
            collectionProduct.setCatalogRefIds(controller.getCurrentSKU() + ", "+controller.getGiftSelected().getAssociatedSkuId());
        } else {
            collectionProduct.setProductId(data.getProductInfo().getProductId());
            collectionProduct.setCatalogRefIds(controller.getCurrentSKU());
            collectionProduct.setProductType(productType);
        }

    }

    public void perfomExpressCheckout() {
        startCheckout();
    }

    private void startCheckout() {
        CheckoutManager checkoutManager = new CheckoutManager();
        checkoutManager.payNowNavigation(getActivity(), new Bundle());
    }

    @Override
    public void onTabFragmentPresented(TabStacker.PresentReason presentReason) {

    }

    @Override
    public void onTabFragmentDismissed(TabStacker.DismissReason dismissReason) {

    }

    @Override
    public View onSaveTabFragmentInstance(Bundle bundle) {
        return rootView;
    }

    @Override
    public void onRestoreTabFragmentInstance(Bundle bundle) {

    }

    private void setFitAnalytics() {
        if (FirebaseManager.getInstance().isFitAnalyticsAvailable() != null && FirebaseManager.getInstance().isFitAnalyticsAvailable()){
            mWidgetFitAnalytics = new FITAWebWidget(mWebViewFitAnalytics, this);
            mWidgetFitAnalytics.load();
        } else {
            fitAnalyticsLayout.setVisibility(View.GONE);
        }
    }

    private List<ManufacturedSize> getManufacturedSizes() {
        List<ManufacturedSize> list = new ArrayList<ManufacturedSize>();
        List<VariantsObjDetail> sizes = (null != controller && null != controller.getVariantsController() && null != controller.getVariantsController().getListVariantSize()) ? controller.getVariantsController().getListVariantSize() : new ArrayList<VariantsObjDetail>();
            for (VariantsObjDetail size : sizes) {
                list.add(new ManufacturedSize(size.getSize(), size.getEnable()));
            }
        return list;
    }

    @Override
    public void onWebWidgetReady(FITAWebWidget widget) {
        Log.d(TAG, "onWebWidgetReady: ");
        WidgetOptions options = new WidgetOptions()
                .setLanguage("es")
                .setShopCountry("MX")
                .setMetric(WidgetOptions.UNITS_METRIC)
                .setCartEnabled(true);

        String images = (null != controller && null != controller.getCurrentVariant()
            && controller.getCurrentVariant().getImages() != null && controller.getCurrentVariant().getImages().getXl() != null)
                ? controller.getCurrentVariant().getImages().getXl() : "";
        if (!images.isEmpty()){
            options.setThumb(images);
        }

        String profileId = PropertiesManager.getInstance().readProperty(PropertiesManager.StoredProperty.SessionId);
        if (profileId != null) {
            options.setUserId(profileId);
        }

        options.setManufacturedSizes(getManufacturedSizes());
        widget.create(null, options);
    }

    @Override
    public void onWebWidgetInit(FITAWebWidget widget) {
        Log.d(TAG, "onWebWidgetInit: ");
        configFitAnalytics(true);
    }

    @Override
    public void onWebWidgetLoadError(FITAWebWidget widget, String description) {
        Log.d(TAG, "onWebWidgetLoadError: ");
        fitAnalyticsLayout.setVisibility(View.GONE);
    }

    @Override
    public void onWebWidgetProductLoad(FITAWebWidget widget, String productId, JSONObject details) {
        Log.d(TAG, "onWebWidgetProductLoad: ");
        fitAnalyticsLayout.setVisibility(View.VISIBLE);
        configFitAnalytics(false);
    }

    @Override
    public void onWebWidgetProductLoadError(FITAWebWidget widget, String productId, JSONObject details) {
        Log.d(TAG, "onWebWidgetProductLoadError: ");
        fitAnalyticsLayout.setVisibility(View.GONE);
    }

    @Override
    public void onWebWidgetOpen(FITAWebWidget widget, String productId) {
        Log.d(TAG, "onWebWidgetOpen: ");
    }

    @Override
    public void onWebWidgetClose(FITAWebWidget widget, String productId, String size, JSONObject details) {
        Log.d(TAG, "onWebWidgetClose: ");
    }

    @Override
    public void onWebWidgetAddToCart(FITAWebWidget widget, String productId, String size, JSONObject details) {
        Log.d(TAG, "onWebWidgetAddToCart: ");
    }

    @Override
    public void onWebWidgetRecommend(FITAWebWidget widget, String productId, String size, JSONObject details) {
        Log.d(TAG, "onWebWidgetRecommend: ");
        if (size.equalsIgnoreCase("new user")) {
            configFitAnalytics(true);
        } else {
            Gson gson= new Gson();
            ObjectSize obj = gson.fromJson(details.toString(),ObjectSize.class);
            settingSizeSelected(obj);
        }
    }

    public void configFitAnalytics(boolean reconfigure) {
        String variant = (null != controller && null != controller.getCurrentVariant()) ? controller.getCurrentVariant().getColor() : "";
        WidgetOptions options = new WidgetOptions()
                .setLanguage("es")
                .setShopCountry("MX")
                .setMetric(WidgetOptions.UNITS_METRIC)
                .setCartEnabled(true);

        String images = (null != controller && null != controller.getCurrentVariant()
                && controller.getCurrentVariant().getImages() != null && controller.getCurrentVariant().getImages().getXl() != null)
                ? controller.getCurrentVariant().getImages().getXl() : "";
        if (!images.isEmpty()){
            options.setThumb(images);
        }

        if (mWidgetFitAnalytics != null) {
            if (!TextUtils.isEmpty(productId)) {
                if (!TextUtils.isEmpty(variant)) {
                    variant = variant.replace(" ", "");
                    if (reconfigure) {
                        mWidgetFitAnalytics.reconfigure("liverpool-" + productId + "-" + variant, options);
                    } else {
                        mWidgetFitAnalytics.recommend("liverpool-" + productId + "-" + variant, options);
                    }
                }
            }
        } else {
            setFitAnalytics();
        }
    }

    private void settingSizeSelected(ObjectSize sizeSelected) {
        this.sizeTag = sizeSelected;
        sizeSelected.setSku(controller.getCurrentSKU());
        if (isAdded() && sizeSelected.getDisplaySize() != null) {
            fitAnalyticsLayout.setVisibility(View.VISIBLE);
            String sizeString =sizeSelected.getDisplaySize().replace(" ", "");
            txtFitAnalytics.setText(setTextUnderline(0, getString(R.string.size_selected_fit_analytics) + sizeString));
            VariantsObjDetail sizeSelectedObject = null;
            for (VariantsObjDetail sizes : controller.getVariantsController().getListVariantSize()) {
                if (!TextUtils.isEmpty(sizeSelected.getDisplaySize()) && sizeSelected.getDisplaySize().equalsIgnoreCase(sizes.getSize().trim())) {
                    sizeSelectedObject = sizes;
                    break;
                }
            }
            if (sizeSelectedObject != null) {
                controller.getVariantsController().setVariantSize(Constants.VARIANT_SIZE, sizeSelectedObject);
            }
        }
    }

    private SpannableString setTextUnderline(int String, String text){
        if (String != 0) {
            SpannableString textUnderline = new SpannableString(getString(String));
            textUnderline.setSpan(new UnderlineSpan(), 0, textUnderline.length(), 0);
            return textUnderline;
        } else {
            SpannableString textUnderline = new SpannableString(text);
            textUnderline.setSpan(new UnderlineSpan(), 0, textUnderline.length(), 0);
            return textUnderline;
        }
    }

    public void trackEventProductDetail(){

        if (this.data == null || !executeEventProductDetail) {
            executeEventProductDetail = true;
            return;
        }

        String provider = null != controller.getMpModel() && !TextUtils.isEmpty(controller.getMpModel().getActualProvider()) ?  "Market Place -" + controller.getMpModel().getActualProvider() : "Liverpool";

        VariantsInfo variant = controller.getCurrentVariant();

        StringBuilder colorBuilder = new StringBuilder();
        String color = "";
        String size = "";
        String material = "";
        String texture = "";

        if (null != controller.getVariantsController()) {
            List<VariantsObjDetail> colorArray = controller.getVariantsController().getListVariants(Constants.VARIANT_COLOR);
            for(int i = 0; i <= colorArray.size() -1; i++){
                if(i == colorArray.size() -1){
                    colorBuilder.append(colorArray.get(i));
                } else {
                    colorBuilder.append(colorArray.get(i) + ", ");
                }
            }
            /*for (VariantsObjDetail v : colorArray) {
                colorBuilder.append(v.getColor() + ", ");
            }*/
            if (colorBuilder.length() > 100) {
                color = colorBuilder.substring(0, 99);
            } else {
                color = colorBuilder.toString();
            }

            StringBuilder sizeBuilder = new StringBuilder();
            List<VariantsObjDetail> sizeArray = controller.getVariantsController().getListVariants(Constants.VARIANT_SIZE);

            for(int i = 0; i <= sizeArray.size() -1; i++){
                if(i == sizeArray.size() -1){
                    sizeBuilder.append(sizeArray.get(i));
                } else {
                    sizeBuilder.append(sizeArray.get(i) + ", ");
                }
            }
            /*for (VariantsObjDetail v : sizeArray) {
                sizeBuilder.append(v.getSize() + ", ");
            }*/
            if (sizeBuilder.length() > 100) {
                size = sizeBuilder.substring(0, 99);
            } else {
                size = sizeBuilder.toString();
            }

            StringBuilder materialBuilder = new StringBuilder();
            List<VariantsObjDetail> materialArray = controller.getVariantsController().getListVariants(Constants.VARIANT_MATERIAL);
            for(int i = 0; i <= materialArray.size() -1; i++){
                if(i == materialArray.size() -1){
                    materialBuilder.append(materialArray.get(i));
                } else {
                    materialBuilder.append(materialArray.get(i) + ", ");
                }
            }
            /*for (VariantsObjDetail v : materialArray) {
                materialBuilder.append(v.getMaterial() + ", ");
            }*/
            if (materialBuilder.length() > 100) {
                material = materialBuilder.substring(0, 99);
            } else {
                material = materialBuilder.toString();
            }

            StringBuilder textureBuilder = new StringBuilder();
            List<VariantsObjDetail> textureArray = controller.getVariantsController().getListVariants(Constants.VARIANT_TEXTURE);
            for(int i = 0; i <= textureArray.size() -1; i++){
                if(i == textureArray.size() -1){
                    textureBuilder.append(textureArray.get(i));
                } else {
                    textureBuilder.append(textureArray.get(i) + ", ");
                }
            }
            /*for (VariantsObjDetail v : textureArray) {
                textureBuilder.append(v.getTexture() + ", ");
            }*/
            if (textureBuilder.length() > 100) {
                texture = textureBuilder.substring(0, 99);
            } else {
                texture = textureBuilder.toString();
            }
        }

        String currentColor = (null != controller.getVariantsController() && !TextUtils.isEmpty(variant.getColor())) ? variant.getColor() : "";
        String currentSize = (null != variant && !TextUtils.isEmpty(variant.getSize())) ? variant.getSize() : "";
        String currentMaterial = (null != variant && !TextUtils.isEmpty(variant.getMaterial())) ? variant.getMaterial() : "";
        String currentTexture = (null != variant && !TextUtils.isEmpty(variant.getTexture())) ? variant.getTexture() : "";

        actualColorTag = currentColor;
        actualSize = currentSize;
        actualMaterial = currentMaterial;
        actualTexture = currentTexture;

        if (firstTimeProductDetail){
            firstTimeProductDetail = false;
            currentColor = removeLast(color);
            currentSize = removeLast(size);
            currentMaterial = removeLast(material);
            currentTexture = removeLast(texture);
        }

        String name = (null != data.getProductInfo().getDisplayName() && !TextUtils.isEmpty(data.getProductInfo().getDisplayName())) ? data.getProductInfo().getDisplayName() : "";
        String giftSKu = (null != controller.getGiftSelected() && !TextUtils.isEmpty(controller.getGiftSelected().getAssociatedSkuId())) ? controller.getGiftSelected().getAssociatedSkuId() : "";

        String skuYN = "";
        if(giftSKu.isEmpty()){
            skuYN = "N";
        } else {
            skuYN = "Y";
        }

        Double price = 0.0;
        Double originalPrice = 0.0;

        if (null != data.getProductInfo().getProductPrice() && data.getProductInfo().getProductPrice() > 0.0) {
            price = data.getProductInfo().getProductPrice();
            originalPrice = data.getProductInfo().getProductPrice();
        }
        if (null != data.getProductInfo().getListPrice() && data.getProductInfo().getListPrice() > 0.0) {
            price = data.getProductInfo().getListPrice();
            if (originalPrice == 0.0) {
                originalPrice = data.getProductInfo().getListPrice();
            }
        }
        if (null != data.getProductInfo().getPromoPrice() && data.getProductInfo().getPromoPrice() > 0.0)
            price = data.getProductInfo().getPromoPrice();



        TrackingManager.getInstance().trackProductDetail(
                fromPDP,
                provider, "",
                controller.getProductDetailDto().getProductInfo().getProductId(),
                "",
                controller.getCurrentSKU(),
                currentColor,
                currentSize,
                currentMaterial,
                currentTexture,
                giftSKu,
                String.valueOf(price),
                String.valueOf(originalPrice),
                name,
                skuYN);



    }

    public String removeLast(String str) {
        if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == ' ') {
            str = str.substring(0, str.length() - 1);
        }
        if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == ',') {
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    @Override
    public void setBanner(Integer viewId) {
        if(viewId != null){
            LayoutInflater inflater = LayoutInflater.from(getActivityContext());
            FrameLayout frameLayout = rootView.findViewById(R.id.custom_header_pdp);
            View viewInflater = inflater.inflate(viewId, frameLayout, false);
            frameLayout.addView(viewInflater);
        }
    }

    @Override
    public void setPriceColor(Integer textColor) {
        if (txtMinListPrice != null) {
            txtMinListPrice.setTextColor(textColor);
            txtMinListPrice.setTypeface(null, Typeface.BOLD);
        }
        if (txtGuion != null) {
            txtGuion.setTextColor(textColor);
            txtGuion.setTypeface(null, Typeface.BOLD);
        }
        if (txtMaxListPrice != null) {
            txtMaxListPrice.setTextColor(textColor);
            txtMaxListPrice.setTypeface(null, Typeface.BOLD);
        }
        if (txtMinPromoPrice != null) {
            txtMinPromoPrice.setTextColor(textColor);
            txtMinPromoPrice.setTypeface(null, Typeface.BOLD);
        }
        if (txtGuion2 != null) {
            txtGuion2.setTextColor(textColor);
            txtGuion2.setTypeface(null, Typeface.BOLD);
        }
        if (txtMaxPromoPrice != null){
            txtMaxPromoPrice.setTextColor(textColor);
            txtMaxPromoPrice.setTypeface(null, Typeface.BOLD);
        }
    }


    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        if (pdpCustomizablePresenter != null) {
            pdpCustomizablePresenter.customizeView();
        }
    }

    public void hideRecommendations(){
        lnContentCarrousel.setVisibility(View.GONE);
    }

    @Override
    public void setAllCaps() {
        PdpUtils.setValidatedCaps(txtProductName);
        PdpUtils.setValidatedCaps(txtProductCode);
        TextView tvFreeShipping = rootView.findViewById(R.id.tvFreeShipping);
        PdpUtils.setValidatedCaps(tvFreeShipping);
        PdpUtils.setValidatedCaps(tvElectronicWalletPdp);
        PdpUtils.setValidatedCaps(txtPromo);
        PdpUtils.setValidatedCaps(txtDisponibility);
        PdpUtils.setValidatedCaps(quantityPDP);
        PdpUtils.setValidatedCaps(btnPayNow);
        PdpUtils.setValidatedCaps(btnAddBag);
        PdpUtils.setValidatedCaps(lblEdd);
        PdpUtils.setValidatedCaps(txtDescription);
        PdpUtils.setValidatedCaps(txtPaymentOptions);
        //PdpUtils.setValidatedCaps(txtReview);
        //TextView shareButton = rootView.findViewById(R.id.share_pdp_button);
        //PdpUtils.setValidatedCaps(shareButton);
        TextView textViewPolicy = rootView.findViewById(R.id.txtPolicy);
        PdpUtils.setValidatedCaps(textViewPolicy);
        //TextView textViewExtraInformation = rootView.findViewById(R.id.txtExtraInformation);
        //PdpUtils.setValidatedCaps(textViewExtraInformation);
        //TextView textViewUserGuide = rootView.findViewById(R.id.txtUserGuide);
        //PdpUtils.setValidatedCaps(textViewUserGuide);
        PdpUtils.setValidatedCaps(txtCharacteristics);
        PdpUtils.setValidatedCaps(btnCancel);
        PdpUtils.setValidatedCaps(btnAddMyBagGiftRegistry);
        PdpUtils.setValidatedCaps(txtMaxPromoPrice);
        PdpUtils.setValidatedCaps(textExpressDelivery);
        PdpUtils.setValidatedCaps(min_amount);
        PdpUtils.setValidatedCaps(txtAddressPdp);
        PdpUtils.setValidatedCaps(txtAddressNickname);
        PdpUtils.setValidatedCaps(txtEddRange);
        PdpUtils.setValidatedCaps(txtStock);
        PdpUtils.setValidatedCaps(txtFitAnalytics);
    }

    @Override
    public void hideRank() {
        LinearLayout rankingLayout = rootView.findViewById(R.id.lnRaiting);
        rankingLayout.setVisibility(View.GONE);
    }

    @Override
    public void colorButtons(int color) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            btnPayNow.setBackgroundTintList(getActivityContext().getColorStateList(R.color.black));
            btnAddBag.setBackgroundResource(R.drawable.button_white_border_gray);
            btnAcept.setBackgroundTintList(getActivityContext().getColorStateList(R.color.black));
            btnAddBagDigital.setBackgroundTintList(getActivityContext().getColorStateList(R.color.black));
        }

    }

    @Override
    public void setTextButtonColor(int color) {
        btnAddBag.setTextColor(color);
    }

    @Override
    public void setDotsColor(int colorSelected, int colorUnselected) {
        dotsColor = colorSelected;
        dotsColorUnselected = colorUnselected;
    }

    @Override
    public void setVariantSizeColor(int color) {
        sizeButtonColor = color;
    }

}
